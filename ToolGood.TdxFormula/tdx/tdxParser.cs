//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from tdx.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
public partial class tdxParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, SUB=24, NUM=25, 
		STRING=26, RSI=27, WR=28, BIAS=29, CCI=30, ATR=31, BBI=32, VR=33, OBV=34, 
		MFI=35, ASI=36, ROC=37, MASS=38, MTM=39, BRAR=40, DPO=41, EMV=42, TRIX=43, 
		PSY=44, HIGH=45, LOW=46, CLOSE=47, VOL=48, OPEN=49, AMOUNT=50, TURN=51, 
		CAPITAL=52, DATE=53, TIME=54, TIME2=55, YEAR=56, MONTH=57, WEEKDAY=58, 
		DAY=59, HOUR=60, MINUTE=61, FROMOPEN=62, DAYSTOTODAY=63, DATETODAY=64, 
		DRAWNULL=65, BARSLAST=66, BARSSINCE=67, BARSSINCEN=68, COUNT=69, DMA=70, 
		HHV=71, HHVBARS=72, LLV=73, LLVBARS=74, REF=75, REFV=76, SUM=77, SUMBARS=78, 
		SMA=79, MA=80, EMA=81, MEMA=82, RANGE=83, REVERSE=84, FILTER=85, CONST=86, 
		BARSLASTCOUNT=87, HOD=88, LOD=89, MULAR=90, FILTERX=91, TR=92, WMA=93, 
		TMA=94, AMA=95, TOPRANGE=96, LOWRANGE=97, FINDHIGH=98, FINDHIGHBARS=99, 
		FINDLOW=100, FINDLOWBARS=101, ZTPRICE=102, DTPRICE=103, BACKSET=104, BARSCOUNT=105, 
		CROSS=106, UPNDAY=107, DOWNNDAY=108, NDAY=109, EXIST=110, EXISTR=111, 
		EVERY=112, LAST=113, LONGCROSS=114, ISVALID=115, NOT=116, AND=117, OR=118, 
		IF=119, IFN=120, VALUEWHEN=121, MAX=122, MAX6=123, MIN=124, MIN6=125, 
		ACOS=126, ASIN=127, ATAN=128, COS=129, SIN=130, TAN=131, EXP=132, LN=133, 
		LOG=134, SORT=135, POW=136, ABS=137, SQRT=138, CEILING=139, FLOOR=140, 
		INTPART=141, BETWEEN=142, FRACPART=143, ROUND=144, ROUND2=145, SIGN=146, 
		MOD=147, AVEDEV=148, DEVSQ=149, FORCAST=150, SLOPE=151, STD=152, STDP=153, 
		VAR=154, VARP=155, STDDEV=156, COVAR=157, RELATE=158, COST=159, PEAK=160, 
		PEAKBARS=161, SAR=162, SARTURN=163, TROUGH=164, TROUGHBARS=165, WINNER=166, 
		ZIG=167, LWINNER=168, PWINNER=169, COSTEX=170, PPART=171, ZIGA=172, INDEXA=173, 
		INDEXC=174, INDEXH=175, INDEXL=176, INDEXO=177, INDEXV=178, PLOYLINE=179, 
		DRAWLINE=180, DRAWKLINE=181, STICKLINE=182, DRAWICON=183, DRAWTEXT=184, 
		DRAWSL=185, DRAWTEXT_FIX=186, DRAWNUMBER=187, DRAWNUMBER_FIX=188, RGB=189, 
		DRAWBAND=190, DRAWBMP=191, DRAWGBK=192, DRAWRECTREL=193, COLOR=194, LINETHICK=195, 
		STICK=196, COLORSTICK=197, VOLSTICK=198, LINESTICK=199, CROSSDOT=200, 
		CIRCLEDOT=201, POINTDOT=202, NODRAW=203, DRAWABOVE=204, NOFRAME=205, DOTLINE=206, 
		NOTTEXT=207, PLAYSOUND=208, PARAMETER=209, WS=210, COMMENT=211;
	public const int
		RULE_prog = 0, RULE_line = 1, RULE_attach = 2, RULE_color = 3, RULE_draw = 4, 
		RULE_expr = 5;
	public static readonly string[] ruleNames = {
		"prog", "line", "attach", "color", "draw", "expr"
	};

	private static readonly string[] _LiteralNames = {
		null, "':'", "':='", "','", "';'", "'('", "')'", "'*'", "'/'", "'+'", 
		"'>'", "'>='", "'<'", "'<='", "'='", "'=='", "'==='", "'!=='", "'!='", 
		"'<>'", "'&&'", "'||'", "'['", "']'", "'-'", null, null, "'RSI'", "'WR'", 
		"'BIAS'", "'CCI'", "'ATR'", "'BBI'", "'VR'", "'OBV'", "'MFI'", "'ASI'", 
		"'ROC'", "'MASS'", "'MTM'", "'BRAR'", "'DPO'", "'EMV'", "'TRIX'", "'PSY'", 
		null, null, null, null, null, null, null, "'CAPITAL'", "'DATE'", "'TIME'", 
		"'TIME2'", "'YEAR'", "'MONTH'", "'WEEKDAY'", "'DAY'", "'HOUR'", "'MINUTE'", 
		"'FROMOPEN'", "'DAYSTOTODAY'", "'DATETODAY'", "'DRAWNULL'", "'BARSLAST'", 
		"'BARSSINCE'", "'BARSSINCEN'", "'COUNT'", "'DMA'", "'HHV'", "'HHVBARS'", 
		"'LLV'", "'LLVBARS'", "'REF'", "'REFV'", "'SUM'", "'SUMBARS'", "'SMA'", 
		"'MA'", null, "'MEMA'", "'RANGE'", "'REVERSE'", "'FILTER'", "'CONST'", 
		"'BARSLASTCOUNT'", "'HOD'", "'LOD'", "'MULAR'", "'FILTERX'", "'TR'", "'WMA'", 
		"'TMA'", "'AMA'", "'TOPRANGE'", "'LOWRANGE'", "'FINDHIGH'", "'FINDHIGHBARS'", 
		"'FINDLOW'", "'FINDLOWBARS'", "'ZTPRICE'", "'DTPRICE'", "'BACKSET'", "'BARSCOUNT'", 
		"'CROSS'", "'UPNDAY'", "'DOWNNDAY'", "'NDAY'", "'EXIST'", "'EXISTR'", 
		"'EVERY'", "'LAST'", "'LONGCROSS'", "'ISVALID'", "'NOT'", "'AND'", "'OR'", 
		null, "'IFN'", "'VALUEWHEN'", "'MAX'", "'MAX6'", "'MIN'", "'MIN6'", "'ACOS'", 
		"'ASIN'", "'ATAN'", "'COS'", "'SIN'", "'TAN'", "'EXP'", "'LN'", "'LOG'", 
		"'SORT'", "'POW'", "'ABS'", "'SQRT'", "'CEILING'", "'FLOOR'", "'INTPART'", 
		"'BETWEEN'", "'FRACPART'", "'ROUND'", "'ROUND2'", "'SIGN'", "'MOD'", "'AVEDEV'", 
		"'DEVSQ'", "'FORCAST'", "'SLOPE'", "'STD'", "'STDP'", "'VAR'", "'VARP'", 
		"'STDDEV'", "'COVAR'", "'RELATE'", "'COST'", "'PEAK'", "'PEAKBARS'", "'SAR'", 
		"'SARTURN'", "'TROUGH'", "'TROUGHBARS'", "'WINNER'", "'ZIG'", "'LWINNER'", 
		"'PWINNER'", "'COSTEX'", "'PPART'", "'ZIGA'", "'INDEXA'", "'INDEXC'", 
		"'INDEXH'", "'INDEXL'", "'INDEXO'", "'INDEXV'", "'PLOYLINE'", "'DRAWLINE'", 
		"'DRAWKLINE'", "'STICKLINE'", "'DRAWICON'", "'DRAWTEXT'", "'DRAWSL'", 
		"'DRAWTEXT_FIX'", "'DRAWNUMBER'", "'DRAWNUMBER_FIX'", "'RGB'", "'DRAWBAND'", 
		"'DRAWBMP'", "'DRAWGBK'", "'DRAWRECTREL'", null, null, "'STICK'", "'COLORSTICK'", 
		"'VOLSTICK'", "'LINESTICK'", "'CROSSDOT'", "'CIRCLEDOT'", "'POINTDOT'", 
		"'NODRAW'", "'DRAWABOVE'", "'NOFRAME'", "'DOTLINE'", "'NOTTEXT'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"SUB", "NUM", "STRING", "RSI", "WR", "BIAS", "CCI", "ATR", "BBI", "VR", 
		"OBV", "MFI", "ASI", "ROC", "MASS", "MTM", "BRAR", "DPO", "EMV", "TRIX", 
		"PSY", "HIGH", "LOW", "CLOSE", "VOL", "OPEN", "AMOUNT", "TURN", "CAPITAL", 
		"DATE", "TIME", "TIME2", "YEAR", "MONTH", "WEEKDAY", "DAY", "HOUR", "MINUTE", 
		"FROMOPEN", "DAYSTOTODAY", "DATETODAY", "DRAWNULL", "BARSLAST", "BARSSINCE", 
		"BARSSINCEN", "COUNT", "DMA", "HHV", "HHVBARS", "LLV", "LLVBARS", "REF", 
		"REFV", "SUM", "SUMBARS", "SMA", "MA", "EMA", "MEMA", "RANGE", "REVERSE", 
		"FILTER", "CONST", "BARSLASTCOUNT", "HOD", "LOD", "MULAR", "FILTERX", 
		"TR", "WMA", "TMA", "AMA", "TOPRANGE", "LOWRANGE", "FINDHIGH", "FINDHIGHBARS", 
		"FINDLOW", "FINDLOWBARS", "ZTPRICE", "DTPRICE", "BACKSET", "BARSCOUNT", 
		"CROSS", "UPNDAY", "DOWNNDAY", "NDAY", "EXIST", "EXISTR", "EVERY", "LAST", 
		"LONGCROSS", "ISVALID", "NOT", "AND", "OR", "IF", "IFN", "VALUEWHEN", 
		"MAX", "MAX6", "MIN", "MIN6", "ACOS", "ASIN", "ATAN", "COS", "SIN", "TAN", 
		"EXP", "LN", "LOG", "SORT", "POW", "ABS", "SQRT", "CEILING", "FLOOR", 
		"INTPART", "BETWEEN", "FRACPART", "ROUND", "ROUND2", "SIGN", "MOD", "AVEDEV", 
		"DEVSQ", "FORCAST", "SLOPE", "STD", "STDP", "VAR", "VARP", "STDDEV", "COVAR", 
		"RELATE", "COST", "PEAK", "PEAKBARS", "SAR", "SARTURN", "TROUGH", "TROUGHBARS", 
		"WINNER", "ZIG", "LWINNER", "PWINNER", "COSTEX", "PPART", "ZIGA", "INDEXA", 
		"INDEXC", "INDEXH", "INDEXL", "INDEXO", "INDEXV", "PLOYLINE", "DRAWLINE", 
		"DRAWKLINE", "STICKLINE", "DRAWICON", "DRAWTEXT", "DRAWSL", "DRAWTEXT_FIX", 
		"DRAWNUMBER", "DRAWNUMBER_FIX", "RGB", "DRAWBAND", "DRAWBMP", "DRAWGBK", 
		"DRAWRECTREL", "COLOR", "LINETHICK", "STICK", "COLORSTICK", "VOLSTICK", 
		"LINESTICK", "CROSSDOT", "CIRCLEDOT", "POINTDOT", "NODRAW", "DRAWABOVE", 
		"NOFRAME", "DOTLINE", "NOTTEXT", "PLAYSOUND", "PARAMETER", "WS", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "tdx.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static tdxParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public tdxParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public tdxParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(tdxParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 12;
				line();
				}
				}
				State = 15;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << SUB) | (1L << NUM) | (1L << RSI) | (1L << WR) | (1L << BIAS) | (1L << CCI) | (1L << ATR) | (1L << BBI) | (1L << VR) | (1L << OBV) | (1L << MFI) | (1L << ASI) | (1L << ROC) | (1L << MASS) | (1L << MTM) | (1L << DPO) | (1L << EMV) | (1L << TRIX) | (1L << PSY) | (1L << HIGH) | (1L << LOW) | (1L << CLOSE) | (1L << VOL) | (1L << OPEN) | (1L << AMOUNT) | (1L << TURN) | (1L << CAPITAL) | (1L << DATE) | (1L << TIME) | (1L << TIME2) | (1L << YEAR) | (1L << MONTH) | (1L << WEEKDAY) | (1L << DAY) | (1L << HOUR) | (1L << MINUTE) | (1L << DAYSTOTODAY))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DATETODAY - 64)) | (1L << (DRAWNULL - 64)) | (1L << (BARSLAST - 64)) | (1L << (BARSSINCE - 64)) | (1L << (BARSSINCEN - 64)) | (1L << (COUNT - 64)) | (1L << (DMA - 64)) | (1L << (HHV - 64)) | (1L << (HHVBARS - 64)) | (1L << (LLV - 64)) | (1L << (LLVBARS - 64)) | (1L << (REF - 64)) | (1L << (REFV - 64)) | (1L << (SUM - 64)) | (1L << (SUMBARS - 64)) | (1L << (SMA - 64)) | (1L << (MA - 64)) | (1L << (EMA - 64)) | (1L << (MEMA - 64)) | (1L << (RANGE - 64)) | (1L << (REVERSE - 64)) | (1L << (FILTER - 64)) | (1L << (CONST - 64)) | (1L << (BARSLASTCOUNT - 64)) | (1L << (HOD - 64)) | (1L << (LOD - 64)) | (1L << (MULAR - 64)) | (1L << (FILTERX - 64)) | (1L << (TR - 64)) | (1L << (WMA - 64)) | (1L << (TMA - 64)) | (1L << (AMA - 64)) | (1L << (TOPRANGE - 64)) | (1L << (LOWRANGE - 64)) | (1L << (FINDHIGH - 64)) | (1L << (FINDHIGHBARS - 64)) | (1L << (FINDLOW - 64)) | (1L << (FINDLOWBARS - 64)) | (1L << (ZTPRICE - 64)) | (1L << (DTPRICE - 64)) | (1L << (BACKSET - 64)) | (1L << (BARSCOUNT - 64)) | (1L << (CROSS - 64)) | (1L << (UPNDAY - 64)) | (1L << (DOWNNDAY - 64)) | (1L << (NDAY - 64)) | (1L << (EXIST - 64)) | (1L << (EXISTR - 64)) | (1L << (EVERY - 64)) | (1L << (LAST - 64)) | (1L << (LONGCROSS - 64)) | (1L << (ISVALID - 64)) | (1L << (NOT - 64)) | (1L << (IF - 64)) | (1L << (IFN - 64)) | (1L << (VALUEWHEN - 64)) | (1L << (MAX - 64)) | (1L << (MAX6 - 64)) | (1L << (MIN - 64)) | (1L << (MIN6 - 64)) | (1L << (ACOS - 64)) | (1L << (ASIN - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ATAN - 128)) | (1L << (COS - 128)) | (1L << (SIN - 128)) | (1L << (TAN - 128)) | (1L << (EXP - 128)) | (1L << (LN - 128)) | (1L << (LOG - 128)) | (1L << (POW - 128)) | (1L << (ABS - 128)) | (1L << (SQRT - 128)) | (1L << (CEILING - 128)) | (1L << (FLOOR - 128)) | (1L << (INTPART - 128)) | (1L << (BETWEEN - 128)) | (1L << (FRACPART - 128)) | (1L << (ROUND - 128)) | (1L << (ROUND2 - 128)) | (1L << (SIGN - 128)) | (1L << (MOD - 128)) | (1L << (AVEDEV - 128)) | (1L << (DEVSQ - 128)) | (1L << (FORCAST - 128)) | (1L << (SLOPE - 128)) | (1L << (STD - 128)) | (1L << (STDP - 128)) | (1L << (VAR - 128)) | (1L << (VARP - 128)) | (1L << (STDDEV - 128)) | (1L << (COVAR - 128)) | (1L << (RELATE - 128)) | (1L << (COST - 128)) | (1L << (PEAK - 128)) | (1L << (PEAKBARS - 128)) | (1L << (SAR - 128)) | (1L << (SARTURN - 128)) | (1L << (TROUGH - 128)) | (1L << (TROUGHBARS - 128)) | (1L << (WINNER - 128)) | (1L << (ZIG - 128)) | (1L << (LWINNER - 128)) | (1L << (PWINNER - 128)) | (1L << (COSTEX - 128)) | (1L << (PPART - 128)) | (1L << (ZIGA - 128)) | (1L << (INDEXA - 128)) | (1L << (INDEXC - 128)) | (1L << (INDEXH - 128)) | (1L << (INDEXL - 128)) | (1L << (INDEXO - 128)) | (1L << (INDEXV - 128)) | (1L << (PLOYLINE - 128)) | (1L << (DRAWLINE - 128)) | (1L << (DRAWKLINE - 128)) | (1L << (STICKLINE - 128)) | (1L << (DRAWICON - 128)) | (1L << (DRAWTEXT - 128)) | (1L << (DRAWSL - 128)) | (1L << (DRAWTEXT_FIX - 128)) | (1L << (DRAWNUMBER - 128)) | (1L << (DRAWNUMBER_FIX - 128)) | (1L << (DRAWBAND - 128)) | (1L << (DRAWBMP - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (DRAWGBK - 192)) | (1L << (DRAWRECTREL - 192)) | (1L << (PARAMETER - 192)))) != 0) );
			State = 17;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
	 
		public LineContext() { }
		public virtual void CopyFrom(LineContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Line_funContext : LineContext {
		public IToken set;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAMETER() { return GetToken(tdxParser.PARAMETER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLOR() { return GetToken(tdxParser.COLOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttachContext[] attach() {
			return GetRuleContexts<AttachContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttachContext attach(int i) {
			return GetRuleContext<AttachContext>(i);
		}
		public Line_funContext(LineContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class None_funContext : LineContext {
		public IToken set;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLOR() { return GetToken(tdxParser.COLOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttachContext[] attach() {
			return GetRuleContexts<AttachContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttachContext attach(int i) {
			return GetRuleContext<AttachContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DrawContext draw() {
			return GetRuleContext<DrawContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAMETER() { return GetToken(tdxParser.PARAMETER, 0); }
		public None_funContext(LineContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNone_fun(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 2, RULE_line);
		int _la;
		try {
			State = 115;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				_localctx = new Line_funContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 19;
				Match(PARAMETER);
				State = 20;
				((Line_funContext)_localctx).set = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==T__0 || _la==T__1) ) {
					((Line_funContext)_localctx).set = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 21;
				expr(0);
				State = 30;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLOR) {
					{
					State = 22;
					Match(COLOR);
					State = 27;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__2) {
						{
						{
						State = 23;
						Match(T__2);
						State = 24;
						attach();
						}
						}
						State = 29;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 32;
				Match(T__3);
				}
				break;
			case 2:
				_localctx = new Line_funContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 34;
				Match(PARAMETER);
				State = 35;
				((Line_funContext)_localctx).set = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==T__0 || _la==T__1) ) {
					((Line_funContext)_localctx).set = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 36;
				expr(0);
				State = 39;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 37;
					Match(T__2);
					State = 38;
					attach();
					}
					}
					State = 41;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==T__2 );
				State = 43;
				Match(T__3);
				}
				break;
			case 3:
				_localctx = new None_funContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 45;
				expr(0);
				State = 54;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLOR) {
					{
					State = 46;
					Match(COLOR);
					State = 51;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__2) {
						{
						{
						State = 47;
						Match(T__2);
						State = 48;
						attach();
						}
						}
						State = 53;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 56;
				Match(T__3);
				}
				break;
			case 4:
				_localctx = new None_funContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 58;
				expr(0);
				State = 61;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 59;
					Match(T__2);
					State = 60;
					attach();
					}
					}
					State = 63;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==T__2 );
				State = 65;
				Match(T__3);
				}
				break;
			case 5:
				_localctx = new None_funContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 67;
				draw();
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLOR) {
					{
					State = 68;
					Match(COLOR);
					State = 73;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__2) {
						{
						{
						State = 69;
						Match(T__2);
						State = 70;
						attach();
						}
						}
						State = 75;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 78;
				Match(T__3);
				}
				break;
			case 6:
				_localctx = new None_funContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 80;
				draw();
				State = 83;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 81;
					Match(T__2);
					State = 82;
					attach();
					}
					}
					State = 85;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==T__2 );
				State = 87;
				Match(T__3);
				}
				break;
			case 7:
				_localctx = new None_funContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 89;
				Match(PARAMETER);
				State = 90;
				((None_funContext)_localctx).set = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==T__0 || _la==T__1) ) {
					((None_funContext)_localctx).set = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 91;
				draw();
				State = 100;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLOR) {
					{
					State = 92;
					Match(COLOR);
					State = 97;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__2) {
						{
						{
						State = 93;
						Match(T__2);
						State = 94;
						attach();
						}
						}
						State = 99;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 102;
				Match(T__3);
				}
				break;
			case 8:
				_localctx = new None_funContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 104;
				Match(PARAMETER);
				State = 105;
				((None_funContext)_localctx).set = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==T__0 || _la==T__1) ) {
					((None_funContext)_localctx).set = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 106;
				draw();
				State = 109;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 107;
					Match(T__2);
					State = 108;
					attach();
					}
					}
					State = 111;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==T__2 );
				State = 113;
				Match(T__3);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttachContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColorContext color() {
			return GetRuleContext<ColorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINETHICK() { return GetToken(tdxParser.LINETHICK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STICK() { return GetToken(tdxParser.STICK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLORSTICK() { return GetToken(tdxParser.COLORSTICK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOLSTICK() { return GetToken(tdxParser.VOLSTICK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINESTICK() { return GetToken(tdxParser.LINESTICK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSSDOT() { return GetToken(tdxParser.CROSSDOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CIRCLEDOT() { return GetToken(tdxParser.CIRCLEDOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINTDOT() { return GetToken(tdxParser.POINTDOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODRAW() { return GetToken(tdxParser.NODRAW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DRAWABOVE() { return GetToken(tdxParser.DRAWABOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOFRAME() { return GetToken(tdxParser.NOFRAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTLINE() { return GetToken(tdxParser.DOTLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTTEXT() { return GetToken(tdxParser.NOTTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLAYSOUND() { return GetToken(tdxParser.PLAYSOUND, 0); }
		public AttachContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attach; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttach(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttachContext attach() {
		AttachContext _localctx = new AttachContext(Context, State);
		EnterRule(_localctx, 4, RULE_attach);
		try {
			State = 132;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RGB:
			case COLOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 117;
				color();
				}
				break;
			case LINETHICK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 118;
				Match(LINETHICK);
				}
				break;
			case STICK:
				EnterOuterAlt(_localctx, 3);
				{
				State = 119;
				Match(STICK);
				}
				break;
			case COLORSTICK:
				EnterOuterAlt(_localctx, 4);
				{
				State = 120;
				Match(COLORSTICK);
				}
				break;
			case VOLSTICK:
				EnterOuterAlt(_localctx, 5);
				{
				State = 121;
				Match(VOLSTICK);
				}
				break;
			case LINESTICK:
				EnterOuterAlt(_localctx, 6);
				{
				State = 122;
				Match(LINESTICK);
				}
				break;
			case CROSSDOT:
				EnterOuterAlt(_localctx, 7);
				{
				State = 123;
				Match(CROSSDOT);
				}
				break;
			case CIRCLEDOT:
				EnterOuterAlt(_localctx, 8);
				{
				State = 124;
				Match(CIRCLEDOT);
				}
				break;
			case POINTDOT:
				EnterOuterAlt(_localctx, 9);
				{
				State = 125;
				Match(POINTDOT);
				}
				break;
			case NODRAW:
				EnterOuterAlt(_localctx, 10);
				{
				State = 126;
				Match(NODRAW);
				}
				break;
			case DRAWABOVE:
				EnterOuterAlt(_localctx, 11);
				{
				State = 127;
				Match(DRAWABOVE);
				}
				break;
			case NOFRAME:
				EnterOuterAlt(_localctx, 12);
				{
				State = 128;
				Match(NOFRAME);
				}
				break;
			case DOTLINE:
				EnterOuterAlt(_localctx, 13);
				{
				State = 129;
				Match(DOTLINE);
				}
				break;
			case NOTTEXT:
				EnterOuterAlt(_localctx, 14);
				{
				State = 130;
				Match(NOTTEXT);
				}
				break;
			case PLAYSOUND:
				EnterOuterAlt(_localctx, 15);
				{
				State = 131;
				Match(PLAYSOUND);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLOR() { return GetToken(tdxParser.COLOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RGB() { return GetToken(tdxParser.RGB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ColorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_color; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColorContext color() {
		ColorContext _localctx = new ColorContext(Context, State);
		EnterRule(_localctx, 6, RULE_color);
		try {
			State = 144;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 134;
				Match(COLOR);
				}
				break;
			case RGB:
				EnterOuterAlt(_localctx, 2);
				{
				State = 135;
				Match(RGB);
				State = 136;
				Match(T__4);
				State = 137;
				expr(0);
				State = 138;
				Match(T__2);
				State = 139;
				expr(0);
				State = 140;
				Match(T__2);
				State = 141;
				expr(0);
				State = 142;
				Match(T__5);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DrawContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DRAWTEXT() { return GetToken(tdxParser.DRAWTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(tdxParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DRAWBMP() { return GetToken(tdxParser.DRAWBMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DRAWTEXT_FIX() { return GetToken(tdxParser.DRAWTEXT_FIX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DRAWGBK() { return GetToken(tdxParser.DRAWGBK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DRAWICON() { return GetToken(tdxParser.DRAWICON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(tdxParser.NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DRAWNUMBER() { return GetToken(tdxParser.DRAWNUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DRAWNUMBER_FIX() { return GetToken(tdxParser.DRAWNUMBER_FIX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DRAWLINE() { return GetToken(tdxParser.DRAWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DRAWKLINE() { return GetToken(tdxParser.DRAWKLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DRAWSL() { return GetToken(tdxParser.DRAWSL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DRAWBAND() { return GetToken(tdxParser.DRAWBAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColorContext color() {
			return GetRuleContext<ColorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DRAWRECTREL() { return GetToken(tdxParser.DRAWRECTREL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STICKLINE() { return GetToken(tdxParser.STICKLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLOYLINE() { return GetToken(tdxParser.PLOYLINE, 0); }
		public DrawContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_draw; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDraw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DrawContext draw() {
		DrawContext _localctx = new DrawContext(Context, State);
		EnterRule(_localctx, 8, RULE_draw);
		try {
			State = 298;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DRAWTEXT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 146;
				Match(DRAWTEXT);
				State = 147;
				Match(T__4);
				State = 148;
				expr(0);
				State = 149;
				Match(T__2);
				State = 150;
				expr(0);
				State = 151;
				Match(T__2);
				State = 152;
				Match(STRING);
				State = 153;
				Match(T__5);
				}
				break;
			case DRAWBMP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 155;
				Match(DRAWBMP);
				State = 156;
				Match(T__4);
				State = 157;
				expr(0);
				State = 158;
				Match(T__2);
				State = 159;
				expr(0);
				State = 160;
				Match(T__2);
				State = 161;
				Match(STRING);
				State = 162;
				Match(T__5);
				}
				break;
			case DRAWTEXT_FIX:
				EnterOuterAlt(_localctx, 3);
				{
				State = 164;
				Match(DRAWTEXT_FIX);
				State = 165;
				Match(T__4);
				State = 166;
				expr(0);
				State = 167;
				Match(T__2);
				State = 168;
				expr(0);
				State = 169;
				Match(T__2);
				State = 170;
				expr(0);
				State = 171;
				Match(T__2);
				State = 172;
				expr(0);
				State = 173;
				Match(T__2);
				State = 174;
				Match(STRING);
				State = 175;
				Match(T__5);
				}
				break;
			case DRAWGBK:
				EnterOuterAlt(_localctx, 4);
				{
				State = 177;
				Match(DRAWGBK);
				State = 178;
				Match(T__4);
				State = 179;
				expr(0);
				State = 180;
				Match(T__2);
				State = 181;
				expr(0);
				State = 182;
				Match(T__2);
				State = 183;
				expr(0);
				State = 184;
				Match(T__2);
				State = 185;
				expr(0);
				State = 186;
				Match(T__2);
				State = 187;
				Match(STRING);
				State = 188;
				Match(T__2);
				State = 189;
				expr(0);
				State = 190;
				Match(T__5);
				}
				break;
			case DRAWICON:
				EnterOuterAlt(_localctx, 5);
				{
				State = 192;
				Match(DRAWICON);
				State = 193;
				Match(T__4);
				State = 194;
				expr(0);
				State = 195;
				Match(T__2);
				State = 196;
				expr(0);
				State = 197;
				Match(T__2);
				State = 198;
				Match(NUM);
				State = 199;
				Match(T__5);
				}
				break;
			case DRAWNUMBER:
				EnterOuterAlt(_localctx, 6);
				{
				State = 201;
				Match(DRAWNUMBER);
				State = 202;
				Match(T__4);
				State = 203;
				expr(0);
				State = 204;
				Match(T__2);
				State = 205;
				expr(0);
				State = 206;
				Match(T__2);
				State = 207;
				Match(NUM);
				State = 208;
				Match(T__5);
				}
				break;
			case DRAWNUMBER_FIX:
				EnterOuterAlt(_localctx, 7);
				{
				State = 210;
				Match(DRAWNUMBER_FIX);
				State = 211;
				Match(T__4);
				State = 212;
				expr(0);
				State = 213;
				Match(T__2);
				State = 214;
				expr(0);
				State = 215;
				Match(T__2);
				State = 216;
				Match(NUM);
				State = 217;
				Match(T__5);
				}
				break;
			case DRAWLINE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 219;
				Match(DRAWLINE);
				State = 220;
				Match(T__4);
				State = 221;
				expr(0);
				State = 222;
				Match(T__2);
				State = 223;
				expr(0);
				State = 224;
				Match(T__2);
				State = 225;
				expr(0);
				State = 226;
				Match(T__2);
				State = 227;
				expr(0);
				State = 228;
				Match(T__2);
				State = 229;
				expr(0);
				State = 230;
				Match(T__5);
				}
				break;
			case DRAWKLINE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 232;
				Match(DRAWKLINE);
				State = 233;
				Match(T__4);
				State = 234;
				expr(0);
				State = 235;
				Match(T__2);
				State = 236;
				expr(0);
				State = 237;
				Match(T__2);
				State = 238;
				expr(0);
				State = 239;
				Match(T__2);
				State = 240;
				expr(0);
				State = 241;
				Match(T__5);
				}
				break;
			case DRAWSL:
				EnterOuterAlt(_localctx, 10);
				{
				State = 243;
				Match(DRAWSL);
				State = 244;
				Match(T__4);
				State = 245;
				expr(0);
				State = 246;
				Match(T__2);
				State = 247;
				expr(0);
				State = 248;
				Match(T__2);
				State = 249;
				expr(0);
				State = 250;
				Match(T__2);
				State = 251;
				expr(0);
				State = 252;
				Match(T__2);
				State = 253;
				expr(0);
				State = 254;
				Match(T__5);
				}
				break;
			case DRAWBAND:
				EnterOuterAlt(_localctx, 11);
				{
				State = 256;
				Match(DRAWBAND);
				State = 257;
				Match(T__4);
				State = 258;
				expr(0);
				State = 259;
				Match(T__2);
				State = 260;
				expr(0);
				State = 261;
				Match(T__2);
				State = 262;
				color();
				State = 263;
				Match(T__5);
				}
				break;
			case DRAWRECTREL:
				EnterOuterAlt(_localctx, 12);
				{
				State = 265;
				Match(DRAWRECTREL);
				State = 266;
				Match(T__4);
				State = 267;
				expr(0);
				State = 268;
				Match(T__2);
				State = 269;
				expr(0);
				State = 270;
				Match(T__2);
				State = 271;
				expr(0);
				State = 272;
				Match(T__2);
				State = 273;
				expr(0);
				State = 274;
				Match(T__2);
				State = 275;
				color();
				State = 276;
				Match(T__5);
				}
				break;
			case STICKLINE:
				EnterOuterAlt(_localctx, 13);
				{
				State = 278;
				Match(STICKLINE);
				State = 279;
				Match(T__4);
				State = 280;
				expr(0);
				State = 281;
				Match(T__2);
				State = 282;
				expr(0);
				State = 283;
				Match(T__2);
				State = 284;
				expr(0);
				State = 285;
				Match(T__2);
				State = 286;
				expr(0);
				State = 287;
				Match(T__2);
				State = 288;
				expr(0);
				State = 289;
				Match(T__5);
				}
				break;
			case PLOYLINE:
				EnterOuterAlt(_localctx, 14);
				{
				State = 291;
				Match(PLOYLINE);
				State = 292;
				Match(T__4);
				State = 293;
				expr(0);
				State = 294;
				Match(T__2);
				State = 295;
				expr(0);
				State = 296;
				Match(T__5);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MEMA_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMA() { return GetToken(tdxParser.MEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MEMA_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMEMA_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RANGE_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(tdxParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public RANGE_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRANGE_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class COVAR_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COVAR() { return GetToken(tdxParser.COVAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public COVAR_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCOVAR_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FINDLOWBARS_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINDLOWBARS() { return GetToken(tdxParser.FINDLOWBARS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public FINDLOWBARS_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFINDLOWBARS_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CEILING_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CEILING() { return GetToken(tdxParser.CEILING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public CEILING_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCEILING_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WMA_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WMA() { return GetToken(tdxParser.WMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public WMA_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWMA_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class REFV_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFV() { return GetToken(tdxParser.REFV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public REFV_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitREFV_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddSub_funContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(tdxParser.SUB, 0); }
		public AddSub_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddSub_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ROC_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROC() { return GetToken(tdxParser.ROC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ROC_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitROC_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FILTERX_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTERX() { return GetToken(tdxParser.FILTERX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public FILTERX_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFILTERX_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LOWRANGE_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOWRANGE() { return GetToken(tdxParser.LOWRANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public LOWRANGE_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLOWRANGE_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VR_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VR() { return GetToken(tdxParser.VR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public VR_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVR_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TROUGHBARS_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TROUGHBARS() { return GetToken(tdxParser.TROUGHBARS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public TROUGHBARS_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTROUGHBARS_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RELATE_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELATE() { return GetToken(tdxParser.RELATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public RELATE_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRELATE_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BARSSINCEN_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BARSSINCEN() { return GetToken(tdxParser.BARSSINCEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public BARSSINCEN_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBARSSINCEN_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class INDEXV_REF_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEXV() { return GetToken(tdxParser.INDEXV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(tdxParser.NUM, 0); }
		public INDEXV_REF_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitINDEXV_REF_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TMA_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TMA() { return GetToken(tdxParser.TMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public TMA_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTMA_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MIN_EXT_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN() { return GetToken(tdxParser.MIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MIN_EXT_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMIN_EXT_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VALUEWHEN_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUEWHEN() { return GetToken(tdxParser.VALUEWHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public VALUEWHEN_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVALUEWHEN_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EVERY_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVERY() { return GetToken(tdxParser.EVERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public EVERY_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEVERY_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MASS_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASS() { return GetToken(tdxParser.MASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MASS_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMASS_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HOD_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOD() { return GetToken(tdxParser.HOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public HOD_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHOD_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Judge_funContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Judge_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJudge_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DEVSQ_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEVSQ() { return GetToken(tdxParser.DEVSQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public DEVSQ_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDEVSQ_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PARAMETER_REF_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAMETER() { return GetToken(tdxParser.PARAMETER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(tdxParser.NUM, 0); }
		public PARAMETER_REF_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPARAMETER_REF_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MAX_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX() { return GetToken(tdxParser.MAX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MAX_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMAX_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TAN_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAN() { return GetToken(tdxParser.TAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public TAN_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTAN_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ZIG_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZIG() { return GetToken(tdxParser.ZIG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ZIG_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZIG_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class STDDEV_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDDEV() { return GetToken(tdxParser.STDDEV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public STDDEV_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSTDDEV_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ZIGA_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZIGA() { return GetToken(tdxParser.ZIGA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ZIGA_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZIGA_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NOT_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(tdxParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NOT_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNOT_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EMV_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMV() { return GetToken(tdxParser.EMV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public EMV_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEMV_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class REF_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(tdxParser.REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public REF_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitREF_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TR_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TR() { return GetToken(tdxParser.TR, 0); }
		public TR_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTR_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TROUGH_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TROUGH() { return GetToken(tdxParser.TROUGH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public TROUGH_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTROUGH_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class INDEXO_REF_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEXO() { return GetToken(tdxParser.INDEXO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(tdxParser.NUM, 0); }
		public INDEXO_REF_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitINDEXO_REF_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WR_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WR() { return GetToken(tdxParser.WR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public WR_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWR_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class POW_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POW() { return GetToken(tdxParser.POW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public POW_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPOW_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LWINNER_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LWINNER() { return GetToken(tdxParser.LWINNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public LWINNER_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLWINNER_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MTM_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MTM() { return GetToken(tdxParser.MTM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MTM_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMTM_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BARSLAST_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BARSLAST() { return GetToken(tdxParser.BARSLAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public BARSLAST_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBARSLAST_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MINUTE_REF_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE() { return GetToken(tdxParser.MINUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(tdxParser.NUM, 0); }
		public MINUTE_REF_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMINUTE_REF_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LOW_REF_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW() { return GetToken(tdxParser.LOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(tdxParser.NUM, 0); }
		public LOW_REF_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLOW_REF_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MAX6_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX6() { return GetToken(tdxParser.MAX6, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MAX6_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMAX6_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AMA_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMA() { return GetToken(tdxParser.AMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AMA_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAMA_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UPNDAY_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPNDAY() { return GetToken(tdxParser.UPNDAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public UPNDAY_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUPNDAY_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FILTER_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER() { return GetToken(tdxParser.FILTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public FILTER_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFILTER_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TRIX_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIX() { return GetToken(tdxParser.TRIX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public TRIX_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTRIX_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PEAKBARS_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PEAKBARS() { return GetToken(tdxParser.PEAKBARS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public PEAKBARS_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPEAKBARS_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FINDLOW_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINDLOW() { return GetToken(tdxParser.FINDLOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public FINDLOW_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFINDLOW_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SLOPE_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLOPE() { return GetToken(tdxParser.SLOPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public SLOPE_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSLOPE_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MULAR_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULAR() { return GetToken(tdxParser.MULAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MULAR_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMULAR_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MOD_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(tdxParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MOD_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMOD_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TURN_REF_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TURN() { return GetToken(tdxParser.TURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(tdxParser.NUM, 0); }
		public TURN_REF_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTURN_REF_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TIME_REF_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(tdxParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(tdxParser.NUM, 0); }
		public TIME_REF_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTIME_REF_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LLV_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLV() { return GetToken(tdxParser.LLV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public LLV_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLLV_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class COST_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COST() { return GetToken(tdxParser.COST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public COST_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCOST_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BBI_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BBI() { return GetToken(tdxParser.BBI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public BBI_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBBI_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class COS_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COS() { return GetToken(tdxParser.COS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public COS_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCOS_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LN_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LN() { return GetToken(tdxParser.LN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public LN_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLN_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PPART_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PPART() { return GetToken(tdxParser.PPART, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public PPART_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPPART_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MA_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MA() { return GetToken(tdxParser.MA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MA_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMA_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SUM_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUM() { return GetToken(tdxParser.SUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public SUM_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSUM_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LOD_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOD() { return GetToken(tdxParser.LOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public LOD_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLOD_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LOD_EXT_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOD() { return GetToken(tdxParser.LOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(tdxParser.NUM, 0); }
		public LOD_EXT_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLOD_EXT_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SQRT_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQRT() { return GetToken(tdxParser.SQRT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SQRT_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSQRT_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MFI_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MFI() { return GetToken(tdxParser.MFI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public MFI_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMFI_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CONST_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(tdxParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public CONST_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCONST_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DRAWNULL_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DRAWNULL() { return GetToken(tdxParser.DRAWNULL, 0); }
		public DRAWNULL_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDRAWNULL_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ATAN_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATAN() { return GetToken(tdxParser.ATAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ATAN_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitATAN_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RSI_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSI() { return GetToken(tdxParser.RSI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public RSI_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRSI_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class INDEXC_REF_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEXC() { return GetToken(tdxParser.INDEXC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(tdxParser.NUM, 0); }
		public INDEXC_REF_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitINDEXC_REF_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MONTH_REF_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH() { return GetToken(tdxParser.MONTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(tdxParser.NUM, 0); }
		public MONTH_REF_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMONTH_REF_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IFN_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IFN() { return GetToken(tdxParser.IFN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public IFN_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIFN_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DOWNNDAY_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOWNNDAY() { return GetToken(tdxParser.DOWNNDAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public DOWNNDAY_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDOWNNDAY_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FINDHIGH_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINDHIGH() { return GetToken(tdxParser.FINDHIGH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public FINDHIGH_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFINDHIGH_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WEEKDAY_REF_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEEKDAY() { return GetToken(tdxParser.WEEKDAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(tdxParser.NUM, 0); }
		public WEEKDAY_REF_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWEEKDAY_REF_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LLVBARS_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLVBARS() { return GetToken(tdxParser.LLVBARS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public LLVBARS_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLLVBARS_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DTPRICE_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DTPRICE() { return GetToken(tdxParser.DTPRICE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public DTPRICE_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDTPRICE_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HHV_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HHV() { return GetToken(tdxParser.HHV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public HHV_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHHV_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class COUNT_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT() { return GetToken(tdxParser.COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public COUNT_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCOUNT_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FINDHIGHBARS_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINDHIGHBARS() { return GetToken(tdxParser.FINDHIGHBARS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public FINDHIGHBARS_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFINDHIGHBARS_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BACKSET_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKSET() { return GetToken(tdxParser.BACKSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public BACKSET_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBACKSET_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CROSS_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSS() { return GetToken(tdxParser.CROSS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public CROSS_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCROSS_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class REVERSE_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERSE() { return GetToken(tdxParser.REVERSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(tdxParser.SUB, 0); }
		public REVERSE_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitREVERSE_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Bracket_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Bracket_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracket_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ZTPRICE_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZTPRICE() { return GetToken(tdxParser.ZTPRICE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ZTPRICE_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZTPRICE_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class INTPART_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTPART() { return GetToken(tdxParser.INTPART, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public INTPART_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitINTPART_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BARSLASTCOUNT_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BARSLASTCOUNT() { return GetToken(tdxParser.BARSLASTCOUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public BARSLASTCOUNT_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBARSLASTCOUNT_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LLV_EXT_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLV() { return GetToken(tdxParser.LLV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(tdxParser.NUM, 0); }
		public LLV_EXT_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLLV_EXT_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SUM_EXT_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUM() { return GetToken(tdxParser.SUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(tdxParser.NUM, 0); }
		public SUM_EXT_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSUM_EXT_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HOD_EXT_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOD() { return GetToken(tdxParser.HOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(tdxParser.NUM, 0); }
		public HOD_EXT_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHOD_EXT_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class STD_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STD() { return GetToken(tdxParser.STD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public STD_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSTD_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BIAS_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIAS() { return GetToken(tdxParser.BIAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public BIAS_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBIAS_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MIN6_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN6() { return GetToken(tdxParser.MIN6, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MIN6_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMIN6_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DATETODAY_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETODAY() { return GetToken(tdxParser.DATETODAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DATETODAY_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDATETODAY_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AVEDEV_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVEDEV() { return GetToken(tdxParser.AVEDEV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AVEDEV_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAVEDEV_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class COSTEX_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COSTEX() { return GetToken(tdxParser.COSTEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public COSTEX_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCOSTEX_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EXISTR_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTR() { return GetToken(tdxParser.EXISTR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public EXISTR_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEXISTR_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BETWEEN_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(tdxParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public BETWEEN_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBETWEEN_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SMA_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMA() { return GetToken(tdxParser.SMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public SMA_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSMA_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AMOUNT_REF_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMOUNT() { return GetToken(tdxParser.AMOUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(tdxParser.NUM, 0); }
		public AMOUNT_REF_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAMOUNT_REF_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DPO_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DPO() { return GetToken(tdxParser.DPO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public DPO_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDPO_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DAY_REF_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY() { return GetToken(tdxParser.DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(tdxParser.NUM, 0); }
		public DAY_REF_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDAY_REF_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HOUR_REF_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR() { return GetToken(tdxParser.HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(tdxParser.NUM, 0); }
		public HOUR_REF_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHOUR_REF_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ISVALID_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISVALID() { return GetToken(tdxParser.ISVALID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ISVALID_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitISVALID_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VAR_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(tdxParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public VAR_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVAR_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SIGN_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGN() { return GetToken(tdxParser.SIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SIGN_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSIGN_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FLOOR_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOOR() { return GetToken(tdxParser.FLOOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public FLOOR_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFLOOR_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OBV_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBV() { return GetToken(tdxParser.OBV, 0); }
		public OBV_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOBV_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MIN_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN() { return GetToken(tdxParser.MIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MIN_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMIN_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PEAK_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PEAK() { return GetToken(tdxParser.PEAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public PEAK_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPEAK_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CLOSE_REF_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(tdxParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(tdxParser.NUM, 0); }
		public CLOSE_REF_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCLOSE_REF_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ACOS_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACOS() { return GetToken(tdxParser.ACOS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ACOS_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitACOS_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OPEN_REF_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(tdxParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(tdxParser.NUM, 0); }
		public OPEN_REF_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOPEN_REF_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class YEAR_REF_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR() { return GetToken(tdxParser.YEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(tdxParser.NUM, 0); }
		public YEAR_REF_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitYEAR_REF_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NUM_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(tdxParser.NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(tdxParser.SUB, 0); }
		public NUM_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNUM_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LOG_NUM_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOG() { return GetToken(tdxParser.LOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(tdxParser.NUM, 0); }
		public LOG_NUM_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLOG_NUM_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ABS_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABS() { return GetToken(tdxParser.ABS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ABS_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitABS_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ROUND2_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUND() { return GetToken(tdxParser.ROUND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUND2() { return GetToken(tdxParser.ROUND2, 0); }
		public ROUND2_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitROUND2_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DATE_REF_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(tdxParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(tdxParser.NUM, 0); }
		public DATE_REF_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDATE_REF_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ATR_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATR() { return GetToken(tdxParser.ATR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ATR_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitATR_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SAR_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAR() { return GetToken(tdxParser.SAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public SAR_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSAR_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VOL_REF_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOL() { return GetToken(tdxParser.VOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(tdxParser.NUM, 0); }
		public VOL_REF_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVOL_REF_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IF_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(tdxParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public IF_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIF_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class STDP_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDP() { return GetToken(tdxParser.STDP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public STDP_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSTDP_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HIGH_REF_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HIGH() { return GetToken(tdxParser.HIGH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(tdxParser.NUM, 0); }
		public HIGH_REF_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHIGH_REF_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ASIN_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASIN() { return GetToken(tdxParser.ASIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ASIN_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitASIN_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MAX_EXT_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX() { return GetToken(tdxParser.MAX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MAX_EXT_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMAX_EXT_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FRACPART_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FRACPART() { return GetToken(tdxParser.FRACPART, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public FRACPART_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFRACPART_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PSY_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PSY() { return GetToken(tdxParser.PSY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public PSY_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPSY_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MulDiv_funContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MulDiv_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulDiv_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HHV_EXT_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HHV() { return GetToken(tdxParser.HHV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(tdxParser.NUM, 0); }
		public HHV_EXT_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHHV_EXT_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TIME2_REF_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME2() { return GetToken(tdxParser.TIME2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(tdxParser.NUM, 0); }
		public TIME2_REF_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTIME2_REF_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DMA_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DMA() { return GetToken(tdxParser.DMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public DMA_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDMA_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SIN_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIN() { return GetToken(tdxParser.SIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SIN_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSIN_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WINNER_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINNER() { return GetToken(tdxParser.WINNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public WINNER_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWINNER_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BARSSINCE_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BARSSINCE() { return GetToken(tdxParser.BARSSINCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public BARSSINCE_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBARSSINCE_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FORCAST_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCAST() { return GetToken(tdxParser.FORCAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public FORCAST_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFORCAST_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LOG_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOG() { return GetToken(tdxParser.LOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public LOG_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLOG_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class INDEXH_REF_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEXH() { return GetToken(tdxParser.INDEXH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(tdxParser.NUM, 0); }
		public INDEXH_REF_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitINDEXH_REF_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BARSCOUNT_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BARSCOUNT() { return GetToken(tdxParser.BARSCOUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public BARSCOUNT_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBARSCOUNT_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LONGCROSS_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONGCROSS() { return GetToken(tdxParser.LONGCROSS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public LONGCROSS_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLONGCROSS_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ASI_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASI() { return GetToken(tdxParser.ASI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ASI_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitASI_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SUMBARS_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUMBARS() { return GetToken(tdxParser.SUMBARS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public SUMBARS_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSUMBARS_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TOPRANGE_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOPRANGE() { return GetToken(tdxParser.TOPRANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public TOPRANGE_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTOPRANGE_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndOr_funContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(tdxParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(tdxParser.OR, 0); }
		public AndOr_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndOr_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EMA_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMA() { return GetToken(tdxParser.EMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public EMA_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEMA_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TR_REF_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TR() { return GetToken(tdxParser.TR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(tdxParser.NUM, 0); }
		public TR_REF_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTR_REF_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DAYSTOTODAY_REF_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAYSTOTODAY() { return GetToken(tdxParser.DAYSTOTODAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(tdxParser.NUM, 0); }
		public DAYSTOTODAY_REF_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDAYSTOTODAY_REF_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LAST_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST() { return GetToken(tdxParser.LAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public LAST_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLAST_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class INDEXL_REF_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEXL() { return GetToken(tdxParser.INDEXL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(tdxParser.NUM, 0); }
		public INDEXL_REF_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitINDEXL_REF_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PWINNER_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PWINNER() { return GetToken(tdxParser.PWINNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public PWINNER_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPWINNER_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CCI_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CCI() { return GetToken(tdxParser.CCI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public CCI_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCCI_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NDAY_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NDAY() { return GetToken(tdxParser.NDAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public NDAY_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNDAY_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EXP_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXP() { return GetToken(tdxParser.EXP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public EXP_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEXP_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ROUND_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUND() { return GetToken(tdxParser.ROUND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ROUND_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitROUND_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SARTURN_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SARTURN() { return GetToken(tdxParser.SARTURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public SARTURN_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSARTURN_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VARP_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARP() { return GetToken(tdxParser.VARP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public VARP_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVARP_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class INDEXA_REF_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEXA() { return GetToken(tdxParser.INDEXA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(tdxParser.NUM, 0); }
		public INDEXA_REF_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitINDEXA_REF_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HHVBARS_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HHVBARS() { return GetToken(tdxParser.HHVBARS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public HHVBARS_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHHVBARS_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EXIST_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXIST() { return GetToken(tdxParser.EXIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public EXIST_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEXIST_fun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PARAMETER_funContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAMETER() { return GetToken(tdxParser.PARAMETER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HIGH() { return GetToken(tdxParser.HIGH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW() { return GetToken(tdxParser.LOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(tdxParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOL() { return GetToken(tdxParser.VOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(tdxParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMOUNT() { return GetToken(tdxParser.AMOUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TURN() { return GetToken(tdxParser.TURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAPITAL() { return GetToken(tdxParser.CAPITAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEXA() { return GetToken(tdxParser.INDEXA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEXC() { return GetToken(tdxParser.INDEXC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEXH() { return GetToken(tdxParser.INDEXH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEXL() { return GetToken(tdxParser.INDEXL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEXO() { return GetToken(tdxParser.INDEXO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEXV() { return GetToken(tdxParser.INDEXV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(tdxParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(tdxParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR() { return GetToken(tdxParser.YEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH() { return GetToken(tdxParser.MONTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY() { return GetToken(tdxParser.DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR() { return GetToken(tdxParser.HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE() { return GetToken(tdxParser.MINUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEEKDAY() { return GetToken(tdxParser.WEEKDAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAYSTOTODAY() { return GetToken(tdxParser.DAYSTOTODAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME2() { return GetToken(tdxParser.TIME2, 0); }
		public PARAMETER_funContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItdxVisitor<TResult> typedVisitor = visitor as ItdxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPARAMETER_fun(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1372;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				_localctx = new Bracket_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 301;
				Match(T__4);
				State = 302;
				expr(0);
				State = 303;
				Match(T__5);
				}
				break;
			case 2:
				{
				_localctx = new DMA_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 305;
				Match(DMA);
				State = 306;
				Match(T__4);
				State = 307;
				expr(0);
				State = 308;
				Match(T__2);
				State = 309;
				expr(0);
				State = 310;
				Match(T__5);
				}
				break;
			case 3:
				{
				_localctx = new SMA_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 312;
				Match(SMA);
				State = 313;
				Match(T__4);
				State = 314;
				expr(0);
				State = 315;
				Match(T__2);
				State = 316;
				expr(0);
				State = 317;
				Match(T__2);
				State = 318;
				expr(0);
				State = 319;
				Match(T__5);
				}
				break;
			case 4:
				{
				_localctx = new MA_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 321;
				Match(MA);
				State = 322;
				Match(T__4);
				State = 323;
				expr(0);
				State = 324;
				Match(T__2);
				State = 325;
				expr(0);
				State = 326;
				Match(T__5);
				}
				break;
			case 5:
				{
				_localctx = new EMA_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 328;
				Match(EMA);
				State = 329;
				Match(T__4);
				State = 330;
				expr(0);
				State = 331;
				Match(T__2);
				State = 332;
				expr(0);
				State = 333;
				Match(T__5);
				}
				break;
			case 6:
				{
				_localctx = new TMA_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 335;
				Match(TMA);
				State = 336;
				Match(T__4);
				State = 337;
				expr(0);
				State = 338;
				Match(T__2);
				State = 339;
				expr(0);
				State = 340;
				Match(T__2);
				State = 341;
				expr(0);
				State = 342;
				Match(T__5);
				}
				break;
			case 7:
				{
				_localctx = new MEMA_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 344;
				Match(MEMA);
				State = 345;
				Match(T__4);
				State = 346;
				expr(0);
				State = 347;
				Match(T__2);
				State = 348;
				expr(0);
				State = 349;
				Match(T__5);
				}
				break;
			case 8:
				{
				_localctx = new WMA_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 351;
				Match(WMA);
				State = 352;
				Match(T__4);
				State = 353;
				expr(0);
				State = 354;
				Match(T__2);
				State = 355;
				expr(0);
				State = 356;
				Match(T__5);
				}
				break;
			case 9:
				{
				_localctx = new AMA_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 358;
				Match(AMA);
				State = 359;
				Match(T__4);
				State = 360;
				expr(0);
				State = 361;
				Match(T__2);
				State = 362;
				expr(0);
				State = 363;
				Match(T__5);
				}
				break;
			case 10:
				{
				_localctx = new HHV_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 365;
				Match(HHV);
				State = 366;
				Match(T__4);
				State = 367;
				expr(0);
				State = 368;
				Match(T__2);
				State = 369;
				expr(0);
				State = 370;
				Match(T__5);
				}
				break;
			case 11:
				{
				_localctx = new HHVBARS_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 372;
				Match(HHVBARS);
				State = 373;
				Match(T__4);
				State = 374;
				expr(0);
				State = 375;
				Match(T__2);
				State = 376;
				expr(0);
				State = 377;
				Match(T__5);
				}
				break;
			case 12:
				{
				_localctx = new LLV_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 379;
				Match(LLV);
				State = 380;
				Match(T__4);
				State = 381;
				expr(0);
				State = 382;
				Match(T__2);
				State = 383;
				expr(0);
				State = 384;
				Match(T__5);
				}
				break;
			case 13:
				{
				_localctx = new LLVBARS_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 386;
				Match(LLVBARS);
				State = 387;
				Match(T__4);
				State = 388;
				expr(0);
				State = 389;
				Match(T__2);
				State = 390;
				expr(0);
				State = 391;
				Match(T__5);
				}
				break;
			case 14:
				{
				_localctx = new HOD_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 393;
				Match(HOD);
				State = 394;
				Match(T__4);
				State = 395;
				expr(0);
				State = 396;
				Match(T__2);
				State = 397;
				expr(0);
				State = 398;
				Match(T__5);
				}
				break;
			case 15:
				{
				_localctx = new LOD_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 400;
				Match(LOD);
				State = 401;
				Match(T__4);
				State = 402;
				expr(0);
				State = 403;
				Match(T__2);
				State = 404;
				expr(0);
				State = 405;
				Match(T__5);
				}
				break;
			case 16:
				{
				_localctx = new COUNT_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 407;
				Match(COUNT);
				State = 408;
				Match(T__4);
				State = 409;
				expr(0);
				State = 410;
				Match(T__2);
				State = 411;
				expr(0);
				State = 412;
				Match(T__5);
				}
				break;
			case 17:
				{
				_localctx = new SUM_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 414;
				Match(SUM);
				State = 415;
				Match(T__4);
				State = 416;
				expr(0);
				State = 417;
				Match(T__2);
				State = 418;
				expr(0);
				State = 419;
				Match(T__5);
				}
				break;
			case 18:
				{
				_localctx = new REF_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 421;
				Match(REF);
				State = 422;
				Match(T__4);
				State = 423;
				expr(0);
				State = 424;
				Match(T__2);
				State = 425;
				expr(0);
				State = 426;
				Match(T__5);
				}
				break;
			case 19:
				{
				_localctx = new REFV_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 428;
				Match(REFV);
				State = 429;
				Match(T__4);
				State = 430;
				expr(0);
				State = 431;
				Match(T__2);
				State = 432;
				expr(0);
				State = 433;
				Match(T__5);
				}
				break;
			case 20:
				{
				_localctx = new REVERSE_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 435;
				Match(REVERSE);
				State = 436;
				Match(T__4);
				State = 437;
				expr(0);
				State = 438;
				Match(T__5);
				}
				break;
			case 21:
				{
				_localctx = new BARSLAST_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 440;
				Match(BARSLAST);
				State = 441;
				Match(T__4);
				State = 442;
				expr(0);
				State = 443;
				Match(T__5);
				}
				break;
			case 22:
				{
				_localctx = new BARSSINCE_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 445;
				Match(BARSSINCE);
				State = 446;
				Match(T__4);
				State = 447;
				expr(0);
				State = 448;
				Match(T__5);
				}
				break;
			case 23:
				{
				_localctx = new BARSSINCEN_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 450;
				Match(BARSSINCEN);
				State = 451;
				Match(T__4);
				State = 452;
				expr(0);
				State = 453;
				Match(T__2);
				State = 454;
				expr(0);
				State = 455;
				Match(T__5);
				}
				break;
			case 24:
				{
				_localctx = new BARSLASTCOUNT_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 457;
				Match(BARSLASTCOUNT);
				State = 458;
				Match(T__4);
				State = 459;
				expr(0);
				State = 460;
				Match(T__5);
				}
				break;
			case 25:
				{
				_localctx = new SUMBARS_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 462;
				Match(SUMBARS);
				State = 463;
				Match(T__4);
				State = 464;
				expr(0);
				State = 465;
				Match(T__2);
				State = 466;
				expr(0);
				State = 467;
				Match(T__5);
				}
				break;
			case 26:
				{
				_localctx = new FILTER_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 469;
				Match(FILTER);
				State = 470;
				Match(T__4);
				State = 471;
				expr(0);
				State = 472;
				Match(T__2);
				State = 473;
				expr(0);
				State = 474;
				Match(T__5);
				}
				break;
			case 27:
				{
				_localctx = new CONST_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 476;
				Match(CONST);
				State = 477;
				Match(T__4);
				State = 478;
				expr(0);
				State = 479;
				Match(T__5);
				}
				break;
			case 28:
				{
				_localctx = new MULAR_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 481;
				Match(MULAR);
				State = 482;
				Match(T__4);
				State = 483;
				expr(0);
				State = 484;
				Match(T__2);
				State = 485;
				expr(0);
				State = 486;
				Match(T__5);
				}
				break;
			case 29:
				{
				_localctx = new FILTERX_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 488;
				Match(FILTERX);
				State = 489;
				Match(T__4);
				State = 490;
				expr(0);
				State = 491;
				Match(T__2);
				State = 492;
				expr(0);
				State = 493;
				Match(T__5);
				}
				break;
			case 30:
				{
				_localctx = new TOPRANGE_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 495;
				Match(TOPRANGE);
				State = 496;
				Match(T__4);
				State = 497;
				expr(0);
				State = 498;
				Match(T__5);
				}
				break;
			case 31:
				{
				_localctx = new LOWRANGE_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 500;
				Match(LOWRANGE);
				State = 501;
				Match(T__4);
				State = 502;
				expr(0);
				State = 503;
				Match(T__5);
				}
				break;
			case 32:
				{
				_localctx = new FINDHIGH_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 505;
				Match(FINDHIGH);
				State = 506;
				Match(T__4);
				State = 507;
				expr(0);
				State = 508;
				Match(T__2);
				State = 509;
				expr(0);
				State = 510;
				Match(T__2);
				State = 511;
				expr(0);
				State = 512;
				Match(T__2);
				State = 513;
				expr(0);
				State = 514;
				Match(T__5);
				}
				break;
			case 33:
				{
				_localctx = new FINDHIGHBARS_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 516;
				Match(FINDHIGHBARS);
				State = 517;
				Match(T__4);
				State = 518;
				expr(0);
				State = 519;
				Match(T__2);
				State = 520;
				expr(0);
				State = 521;
				Match(T__2);
				State = 522;
				expr(0);
				State = 523;
				Match(T__2);
				State = 524;
				expr(0);
				State = 525;
				Match(T__5);
				}
				break;
			case 34:
				{
				_localctx = new FINDLOW_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 527;
				Match(FINDLOW);
				State = 528;
				Match(T__4);
				State = 529;
				expr(0);
				State = 530;
				Match(T__2);
				State = 531;
				expr(0);
				State = 532;
				Match(T__2);
				State = 533;
				expr(0);
				State = 534;
				Match(T__2);
				State = 535;
				expr(0);
				State = 536;
				Match(T__5);
				}
				break;
			case 35:
				{
				_localctx = new FINDLOWBARS_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 538;
				Match(FINDLOWBARS);
				State = 539;
				Match(T__4);
				State = 540;
				expr(0);
				State = 541;
				Match(T__2);
				State = 542;
				expr(0);
				State = 543;
				Match(T__2);
				State = 544;
				expr(0);
				State = 545;
				Match(T__2);
				State = 546;
				expr(0);
				State = 547;
				Match(T__5);
				}
				break;
			case 36:
				{
				_localctx = new ZTPRICE_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 549;
				Match(ZTPRICE);
				State = 550;
				Match(T__4);
				State = 551;
				expr(0);
				State = 552;
				Match(T__2);
				State = 553;
				expr(0);
				State = 554;
				Match(T__5);
				}
				break;
			case 37:
				{
				_localctx = new DTPRICE_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 556;
				Match(DTPRICE);
				State = 557;
				Match(T__4);
				State = 558;
				expr(0);
				State = 559;
				Match(T__2);
				State = 560;
				expr(0);
				State = 561;
				Match(T__5);
				}
				break;
			case 38:
				{
				_localctx = new BACKSET_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 563;
				Match(BACKSET);
				State = 564;
				Match(T__4);
				State = 565;
				expr(0);
				State = 566;
				Match(T__2);
				State = 567;
				expr(0);
				State = 568;
				Match(T__5);
				}
				break;
			case 39:
				{
				_localctx = new BARSCOUNT_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 570;
				Match(BARSCOUNT);
				State = 571;
				Match(T__4);
				State = 572;
				expr(0);
				State = 573;
				Match(T__5);
				}
				break;
			case 40:
				{
				_localctx = new HHV_EXT_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 575;
				Match(HHV);
				State = 576;
				Match(T__4);
				State = 577;
				expr(0);
				State = 580;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 578;
						Match(T__2);
						State = 579;
						expr(0);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 582;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 584;
				Match(T__2);
				State = 585;
				Match(NUM);
				State = 586;
				Match(T__5);
				}
				break;
			case 41:
				{
				_localctx = new LLV_EXT_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 588;
				Match(LLV);
				State = 589;
				Match(T__4);
				State = 590;
				expr(0);
				State = 593;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 591;
						Match(T__2);
						State = 592;
						expr(0);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 595;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 597;
				Match(T__2);
				State = 598;
				Match(NUM);
				State = 599;
				Match(T__5);
				}
				break;
			case 42:
				{
				_localctx = new HOD_EXT_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 601;
				Match(HOD);
				State = 602;
				Match(T__4);
				State = 603;
				expr(0);
				State = 606;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 604;
						Match(T__2);
						State = 605;
						expr(0);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 608;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 610;
				Match(T__2);
				State = 611;
				Match(NUM);
				State = 612;
				Match(T__5);
				}
				break;
			case 43:
				{
				_localctx = new LOD_EXT_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 614;
				Match(LOD);
				State = 615;
				Match(T__4);
				State = 616;
				expr(0);
				State = 619;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 617;
						Match(T__2);
						State = 618;
						expr(0);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 621;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 623;
				Match(T__2);
				State = 624;
				Match(NUM);
				State = 625;
				Match(T__5);
				}
				break;
			case 44:
				{
				_localctx = new SUM_EXT_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 627;
				Match(SUM);
				State = 628;
				Match(T__4);
				State = 629;
				expr(0);
				State = 632;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 630;
						Match(T__2);
						State = 631;
						expr(0);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 634;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 636;
				Match(T__2);
				State = 637;
				Match(NUM);
				State = 638;
				Match(T__5);
				}
				break;
			case 45:
				{
				_localctx = new IF_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 640;
				Match(IF);
				State = 641;
				Match(T__4);
				State = 642;
				expr(0);
				State = 643;
				Match(T__2);
				State = 644;
				expr(0);
				State = 645;
				Match(T__2);
				State = 646;
				expr(0);
				State = 647;
				Match(T__5);
				}
				break;
			case 46:
				{
				_localctx = new IFN_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 649;
				Match(IFN);
				State = 650;
				Match(T__4);
				State = 651;
				expr(0);
				State = 652;
				Match(T__2);
				State = 653;
				expr(0);
				State = 654;
				Match(T__2);
				State = 655;
				expr(0);
				State = 656;
				Match(T__5);
				}
				break;
			case 47:
				{
				_localctx = new VALUEWHEN_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 658;
				Match(VALUEWHEN);
				State = 659;
				Match(T__4);
				State = 660;
				expr(0);
				State = 661;
				Match(T__2);
				State = 662;
				expr(0);
				State = 663;
				Match(T__5);
				}
				break;
			case 48:
				{
				_localctx = new CROSS_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 665;
				Match(CROSS);
				State = 666;
				Match(T__4);
				State = 667;
				expr(0);
				State = 668;
				Match(T__2);
				State = 669;
				expr(0);
				State = 670;
				Match(T__5);
				}
				break;
			case 49:
				{
				_localctx = new LONGCROSS_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 672;
				Match(LONGCROSS);
				State = 673;
				Match(T__4);
				State = 674;
				expr(0);
				State = 675;
				Match(T__2);
				State = 676;
				expr(0);
				State = 677;
				Match(T__2);
				State = 678;
				expr(0);
				State = 679;
				Match(T__5);
				}
				break;
			case 50:
				{
				_localctx = new UPNDAY_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 681;
				Match(UPNDAY);
				State = 682;
				Match(T__4);
				State = 683;
				expr(0);
				State = 684;
				Match(T__2);
				State = 685;
				expr(0);
				State = 686;
				Match(T__5);
				}
				break;
			case 51:
				{
				_localctx = new DOWNNDAY_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 688;
				Match(DOWNNDAY);
				State = 689;
				Match(T__4);
				State = 690;
				expr(0);
				State = 691;
				Match(T__2);
				State = 692;
				expr(0);
				State = 693;
				Match(T__5);
				}
				break;
			case 52:
				{
				_localctx = new NDAY_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 695;
				Match(NDAY);
				State = 696;
				Match(T__4);
				State = 697;
				expr(0);
				State = 698;
				Match(T__2);
				State = 699;
				expr(0);
				State = 700;
				Match(T__2);
				State = 701;
				expr(0);
				State = 702;
				Match(T__5);
				}
				break;
			case 53:
				{
				_localctx = new EXIST_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 704;
				Match(EXIST);
				State = 705;
				Match(T__4);
				State = 706;
				expr(0);
				State = 707;
				Match(T__2);
				State = 708;
				expr(0);
				State = 709;
				Match(T__5);
				}
				break;
			case 54:
				{
				_localctx = new EXISTR_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 711;
				Match(EXISTR);
				State = 712;
				Match(T__4);
				State = 713;
				expr(0);
				State = 714;
				Match(T__2);
				State = 715;
				expr(0);
				State = 716;
				Match(T__2);
				State = 717;
				expr(0);
				State = 718;
				Match(T__5);
				}
				break;
			case 55:
				{
				_localctx = new EVERY_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 720;
				Match(EVERY);
				State = 721;
				Match(T__4);
				State = 722;
				expr(0);
				State = 723;
				Match(T__2);
				State = 724;
				expr(0);
				State = 725;
				Match(T__5);
				}
				break;
			case 56:
				{
				_localctx = new LAST_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 727;
				Match(LAST);
				State = 728;
				Match(T__4);
				State = 729;
				expr(0);
				State = 730;
				Match(T__2);
				State = 731;
				expr(0);
				State = 732;
				Match(T__2);
				State = 733;
				expr(0);
				State = 734;
				Match(T__5);
				}
				break;
			case 57:
				{
				_localctx = new ISVALID_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 736;
				Match(ISVALID);
				State = 737;
				Match(T__4);
				State = 738;
				expr(0);
				State = 739;
				Match(T__5);
				}
				break;
			case 58:
				{
				_localctx = new NOT_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 741;
				Match(NOT);
				State = 742;
				Match(T__4);
				State = 743;
				expr(0);
				State = 744;
				Match(T__5);
				}
				break;
			case 59:
				{
				_localctx = new RANGE_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 746;
				Match(RANGE);
				State = 747;
				Match(T__4);
				State = 748;
				expr(0);
				State = 749;
				Match(T__2);
				State = 750;
				expr(0);
				State = 751;
				Match(T__2);
				State = 752;
				expr(0);
				State = 753;
				Match(T__5);
				}
				break;
			case 60:
				{
				_localctx = new MAX_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 755;
				Match(MAX);
				State = 756;
				Match(T__4);
				State = 757;
				expr(0);
				State = 758;
				Match(T__2);
				State = 759;
				expr(0);
				State = 760;
				Match(T__5);
				}
				break;
			case 61:
				{
				_localctx = new MAX6_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 762;
				Match(MAX6);
				State = 763;
				Match(T__4);
				State = 764;
				expr(0);
				State = 765;
				Match(T__2);
				State = 766;
				expr(0);
				State = 767;
				Match(T__2);
				State = 768;
				expr(0);
				State = 769;
				Match(T__2);
				State = 770;
				expr(0);
				State = 771;
				Match(T__2);
				State = 772;
				expr(0);
				State = 773;
				Match(T__2);
				State = 774;
				expr(0);
				State = 775;
				Match(T__5);
				}
				break;
			case 62:
				{
				_localctx = new MIN_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 777;
				Match(MIN);
				State = 778;
				Match(T__4);
				State = 779;
				expr(0);
				State = 780;
				Match(T__2);
				State = 781;
				expr(0);
				State = 782;
				Match(T__5);
				}
				break;
			case 63:
				{
				_localctx = new MIN6_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 784;
				Match(MIN6);
				State = 785;
				Match(T__4);
				State = 786;
				expr(0);
				State = 787;
				Match(T__2);
				State = 788;
				expr(0);
				State = 789;
				Match(T__2);
				State = 790;
				expr(0);
				State = 791;
				Match(T__2);
				State = 792;
				expr(0);
				State = 793;
				Match(T__2);
				State = 794;
				expr(0);
				State = 795;
				Match(T__2);
				State = 796;
				expr(0);
				State = 797;
				Match(T__5);
				}
				break;
			case 64:
				{
				_localctx = new ACOS_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 799;
				Match(ACOS);
				State = 800;
				Match(T__4);
				State = 801;
				expr(0);
				State = 802;
				Match(T__5);
				}
				break;
			case 65:
				{
				_localctx = new ASIN_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 804;
				Match(ASIN);
				State = 805;
				Match(T__4);
				State = 806;
				expr(0);
				State = 807;
				Match(T__5);
				}
				break;
			case 66:
				{
				_localctx = new ATAN_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 809;
				Match(ATAN);
				State = 810;
				Match(T__4);
				State = 811;
				expr(0);
				State = 812;
				Match(T__5);
				}
				break;
			case 67:
				{
				_localctx = new COS_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 814;
				Match(COS);
				State = 815;
				Match(T__4);
				State = 816;
				expr(0);
				State = 817;
				Match(T__5);
				}
				break;
			case 68:
				{
				_localctx = new SIN_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 819;
				Match(SIN);
				State = 820;
				Match(T__4);
				State = 821;
				expr(0);
				State = 822;
				Match(T__5);
				}
				break;
			case 69:
				{
				_localctx = new TAN_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 824;
				Match(TAN);
				State = 825;
				Match(T__4);
				State = 826;
				expr(0);
				State = 827;
				Match(T__5);
				}
				break;
			case 70:
				{
				_localctx = new EXP_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 829;
				Match(EXP);
				State = 830;
				Match(T__4);
				State = 831;
				expr(0);
				State = 832;
				Match(T__5);
				}
				break;
			case 71:
				{
				_localctx = new LN_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 834;
				Match(LN);
				State = 835;
				Match(T__4);
				State = 836;
				expr(0);
				State = 837;
				Match(T__5);
				}
				break;
			case 72:
				{
				_localctx = new LOG_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 839;
				Match(LOG);
				State = 840;
				Match(T__4);
				State = 841;
				expr(0);
				State = 842;
				Match(T__5);
				}
				break;
			case 73:
				{
				_localctx = new SQRT_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 844;
				Match(SQRT);
				State = 845;
				Match(T__4);
				State = 846;
				expr(0);
				State = 847;
				Match(T__5);
				}
				break;
			case 74:
				{
				_localctx = new ABS_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 849;
				Match(ABS);
				State = 850;
				Match(T__4);
				State = 851;
				expr(0);
				State = 852;
				Match(T__5);
				}
				break;
			case 75:
				{
				_localctx = new POW_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 854;
				Match(POW);
				State = 855;
				Match(T__4);
				State = 856;
				expr(0);
				State = 857;
				Match(T__2);
				State = 858;
				expr(0);
				State = 859;
				Match(T__5);
				}
				break;
			case 76:
				{
				_localctx = new CEILING_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 861;
				Match(CEILING);
				State = 862;
				Match(T__4);
				State = 863;
				expr(0);
				State = 864;
				Match(T__5);
				}
				break;
			case 77:
				{
				_localctx = new FLOOR_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 866;
				Match(FLOOR);
				State = 867;
				Match(T__4);
				State = 868;
				expr(0);
				State = 869;
				Match(T__5);
				}
				break;
			case 78:
				{
				_localctx = new INTPART_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 871;
				Match(INTPART);
				State = 872;
				Match(T__4);
				State = 873;
				expr(0);
				State = 874;
				Match(T__5);
				}
				break;
			case 79:
				{
				_localctx = new BETWEEN_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 876;
				Match(BETWEEN);
				State = 877;
				Match(T__4);
				State = 878;
				expr(0);
				State = 879;
				Match(T__2);
				State = 880;
				expr(0);
				State = 881;
				Match(T__2);
				State = 882;
				expr(0);
				State = 883;
				Match(T__5);
				}
				break;
			case 80:
				{
				_localctx = new FRACPART_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 885;
				Match(FRACPART);
				State = 886;
				Match(T__4);
				State = 887;
				expr(0);
				State = 888;
				Match(T__5);
				}
				break;
			case 81:
				{
				_localctx = new ROUND_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 890;
				Match(ROUND);
				State = 891;
				Match(T__4);
				State = 892;
				expr(0);
				State = 893;
				Match(T__5);
				}
				break;
			case 82:
				{
				_localctx = new ROUND2_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 895;
				Match(ROUND);
				State = 896;
				Match(T__4);
				State = 897;
				expr(0);
				State = 898;
				Match(T__2);
				State = 899;
				expr(0);
				State = 900;
				Match(T__5);
				}
				break;
			case 83:
				{
				_localctx = new ROUND2_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 902;
				Match(ROUND2);
				State = 903;
				Match(T__4);
				State = 904;
				expr(0);
				State = 905;
				Match(T__2);
				State = 906;
				expr(0);
				State = 907;
				Match(T__5);
				}
				break;
			case 84:
				{
				_localctx = new SIGN_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 909;
				Match(SIGN);
				State = 910;
				Match(T__4);
				State = 911;
				expr(0);
				State = 912;
				Match(T__5);
				}
				break;
			case 85:
				{
				_localctx = new MOD_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 914;
				Match(MOD);
				State = 915;
				Match(T__4);
				State = 916;
				expr(0);
				State = 917;
				Match(T__2);
				State = 918;
				expr(0);
				State = 919;
				Match(T__5);
				}
				break;
			case 86:
				{
				_localctx = new LOG_NUM_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 921;
				Match(LOG);
				State = 922;
				Match(T__4);
				State = 923;
				expr(0);
				State = 924;
				Match(T__2);
				State = 925;
				Match(NUM);
				State = 926;
				Match(T__5);
				}
				break;
			case 87:
				{
				_localctx = new MAX_EXT_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 928;
				Match(MAX);
				State = 929;
				Match(T__4);
				State = 930;
				expr(0);
				State = 931;
				Match(T__2);
				State = 932;
				expr(0);
				State = 935;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 933;
					Match(T__2);
					State = 934;
					expr(0);
					}
					}
					State = 937;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==T__2 );
				State = 939;
				Match(T__5);
				}
				break;
			case 88:
				{
				_localctx = new MIN_EXT_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 941;
				Match(MIN);
				State = 942;
				Match(T__4);
				State = 943;
				expr(0);
				State = 944;
				Match(T__2);
				State = 945;
				expr(0);
				State = 948;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 946;
					Match(T__2);
					State = 947;
					expr(0);
					}
					}
					State = 950;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==T__2 );
				State = 952;
				Match(T__5);
				}
				break;
			case 89:
				{
				_localctx = new AVEDEV_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 954;
				Match(AVEDEV);
				State = 955;
				Match(T__4);
				State = 956;
				expr(0);
				State = 957;
				Match(T__2);
				State = 958;
				expr(0);
				State = 959;
				Match(T__5);
				}
				break;
			case 90:
				{
				_localctx = new DEVSQ_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 961;
				Match(DEVSQ);
				State = 962;
				Match(T__4);
				State = 963;
				expr(0);
				State = 964;
				Match(T__2);
				State = 965;
				expr(0);
				State = 966;
				Match(T__5);
				}
				break;
			case 91:
				{
				_localctx = new FORCAST_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 968;
				Match(FORCAST);
				State = 969;
				Match(T__4);
				State = 970;
				expr(0);
				State = 971;
				Match(T__2);
				State = 972;
				expr(0);
				State = 973;
				Match(T__5);
				}
				break;
			case 92:
				{
				_localctx = new SLOPE_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 975;
				Match(SLOPE);
				State = 976;
				Match(T__4);
				State = 977;
				expr(0);
				State = 978;
				Match(T__2);
				State = 979;
				expr(0);
				State = 980;
				Match(T__5);
				}
				break;
			case 93:
				{
				_localctx = new STD_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 982;
				Match(STD);
				State = 983;
				Match(T__4);
				State = 984;
				expr(0);
				State = 985;
				Match(T__2);
				State = 986;
				expr(0);
				State = 987;
				Match(T__5);
				}
				break;
			case 94:
				{
				_localctx = new STDP_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 989;
				Match(STDP);
				State = 990;
				Match(T__4);
				State = 991;
				expr(0);
				State = 992;
				Match(T__2);
				State = 993;
				expr(0);
				State = 994;
				Match(T__5);
				}
				break;
			case 95:
				{
				_localctx = new VAR_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 996;
				Match(VAR);
				State = 997;
				Match(T__4);
				State = 998;
				expr(0);
				State = 999;
				Match(T__2);
				State = 1000;
				expr(0);
				State = 1001;
				Match(T__5);
				}
				break;
			case 96:
				{
				_localctx = new VARP_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1003;
				Match(VARP);
				State = 1004;
				Match(T__4);
				State = 1005;
				expr(0);
				State = 1006;
				Match(T__2);
				State = 1007;
				expr(0);
				State = 1008;
				Match(T__5);
				}
				break;
			case 97:
				{
				_localctx = new STDDEV_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1010;
				Match(STDDEV);
				State = 1011;
				Match(T__4);
				State = 1012;
				expr(0);
				State = 1013;
				Match(T__2);
				State = 1014;
				expr(0);
				State = 1015;
				Match(T__5);
				}
				break;
			case 98:
				{
				_localctx = new COVAR_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1017;
				Match(COVAR);
				State = 1018;
				Match(T__4);
				State = 1019;
				expr(0);
				State = 1020;
				Match(T__2);
				State = 1021;
				expr(0);
				State = 1022;
				Match(T__2);
				State = 1023;
				expr(0);
				State = 1024;
				Match(T__5);
				}
				break;
			case 99:
				{
				_localctx = new RELATE_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1026;
				Match(RELATE);
				State = 1027;
				Match(T__4);
				State = 1028;
				expr(0);
				State = 1029;
				Match(T__2);
				State = 1030;
				expr(0);
				State = 1031;
				Match(T__2);
				State = 1032;
				expr(0);
				State = 1033;
				Match(T__5);
				}
				break;
			case 100:
				{
				_localctx = new COST_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1035;
				Match(COST);
				State = 1036;
				Match(T__4);
				State = 1037;
				expr(0);
				State = 1038;
				Match(T__5);
				}
				break;
			case 101:
				{
				_localctx = new PEAK_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1040;
				Match(PEAK);
				State = 1041;
				Match(T__4);
				State = 1042;
				expr(0);
				State = 1043;
				Match(T__2);
				State = 1044;
				expr(0);
				State = 1045;
				Match(T__2);
				State = 1046;
				expr(0);
				State = 1047;
				Match(T__5);
				}
				break;
			case 102:
				{
				_localctx = new PEAKBARS_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1049;
				Match(PEAKBARS);
				State = 1050;
				Match(T__4);
				State = 1051;
				expr(0);
				State = 1052;
				Match(T__2);
				State = 1053;
				expr(0);
				State = 1054;
				Match(T__2);
				State = 1055;
				expr(0);
				State = 1056;
				Match(T__5);
				}
				break;
			case 103:
				{
				_localctx = new SAR_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1058;
				Match(SAR);
				State = 1059;
				Match(T__4);
				State = 1060;
				expr(0);
				State = 1061;
				Match(T__2);
				State = 1062;
				expr(0);
				State = 1063;
				Match(T__2);
				State = 1064;
				expr(0);
				State = 1065;
				Match(T__5);
				}
				break;
			case 104:
				{
				_localctx = new SARTURN_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1067;
				Match(SARTURN);
				State = 1068;
				Match(T__4);
				State = 1069;
				expr(0);
				State = 1070;
				Match(T__2);
				State = 1071;
				expr(0);
				State = 1072;
				Match(T__2);
				State = 1073;
				expr(0);
				State = 1074;
				Match(T__5);
				}
				break;
			case 105:
				{
				_localctx = new TROUGH_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1076;
				Match(TROUGH);
				State = 1077;
				Match(T__4);
				State = 1078;
				expr(0);
				State = 1079;
				Match(T__2);
				State = 1080;
				expr(0);
				State = 1081;
				Match(T__2);
				State = 1082;
				expr(0);
				State = 1083;
				Match(T__5);
				}
				break;
			case 106:
				{
				_localctx = new TROUGHBARS_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1085;
				Match(TROUGHBARS);
				State = 1086;
				Match(T__4);
				State = 1087;
				expr(0);
				State = 1088;
				Match(T__2);
				State = 1089;
				expr(0);
				State = 1090;
				Match(T__2);
				State = 1091;
				expr(0);
				State = 1092;
				Match(T__5);
				}
				break;
			case 107:
				{
				_localctx = new WINNER_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1094;
				Match(WINNER);
				State = 1095;
				Match(T__4);
				State = 1096;
				expr(0);
				State = 1097;
				Match(T__5);
				}
				break;
			case 108:
				{
				_localctx = new LWINNER_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1099;
				Match(LWINNER);
				State = 1100;
				Match(T__4);
				State = 1101;
				expr(0);
				State = 1102;
				Match(T__2);
				State = 1103;
				expr(0);
				State = 1104;
				Match(T__5);
				}
				break;
			case 109:
				{
				_localctx = new PWINNER_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1106;
				Match(PWINNER);
				State = 1107;
				Match(T__4);
				State = 1108;
				expr(0);
				State = 1109;
				Match(T__2);
				State = 1110;
				expr(0);
				State = 1111;
				Match(T__5);
				}
				break;
			case 110:
				{
				_localctx = new COSTEX_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1113;
				Match(COSTEX);
				State = 1114;
				Match(T__4);
				State = 1115;
				expr(0);
				State = 1116;
				Match(T__2);
				State = 1117;
				expr(0);
				State = 1118;
				Match(T__5);
				}
				break;
			case 111:
				{
				_localctx = new PPART_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1120;
				Match(PPART);
				State = 1121;
				Match(T__4);
				State = 1122;
				expr(0);
				State = 1123;
				Match(T__5);
				}
				break;
			case 112:
				{
				_localctx = new ZIG_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1125;
				Match(ZIG);
				State = 1126;
				Match(T__4);
				State = 1127;
				expr(0);
				State = 1128;
				Match(T__2);
				State = 1129;
				expr(0);
				State = 1130;
				Match(T__5);
				}
				break;
			case 113:
				{
				_localctx = new ZIGA_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1132;
				Match(ZIGA);
				State = 1133;
				Match(T__4);
				State = 1134;
				expr(0);
				State = 1135;
				Match(T__2);
				State = 1136;
				expr(0);
				State = 1137;
				Match(T__5);
				}
				break;
			case 114:
				{
				_localctx = new DATETODAY_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1139;
				Match(DATETODAY);
				State = 1140;
				Match(T__4);
				State = 1141;
				expr(0);
				State = 1142;
				Match(T__5);
				}
				break;
			case 115:
				{
				_localctx = new PARAMETER_REF_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1144;
				Match(PARAMETER);
				State = 1145;
				Match(T__21);
				State = 1146;
				Match(NUM);
				State = 1147;
				Match(T__22);
				}
				break;
			case 116:
				{
				_localctx = new TR_REF_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1148;
				Match(TR);
				State = 1149;
				Match(T__21);
				State = 1150;
				Match(NUM);
				State = 1151;
				Match(T__22);
				}
				break;
			case 117:
				{
				_localctx = new CLOSE_REF_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1152;
				Match(CLOSE);
				State = 1153;
				Match(T__21);
				State = 1154;
				Match(NUM);
				State = 1155;
				Match(T__22);
				}
				break;
			case 118:
				{
				_localctx = new HIGH_REF_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1156;
				Match(HIGH);
				State = 1157;
				Match(T__21);
				State = 1158;
				Match(NUM);
				State = 1159;
				Match(T__22);
				}
				break;
			case 119:
				{
				_localctx = new LOW_REF_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1160;
				Match(LOW);
				State = 1161;
				Match(T__21);
				State = 1162;
				Match(NUM);
				State = 1163;
				Match(T__22);
				}
				break;
			case 120:
				{
				_localctx = new OPEN_REF_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1164;
				Match(OPEN);
				State = 1165;
				Match(T__21);
				State = 1166;
				Match(NUM);
				State = 1167;
				Match(T__22);
				}
				break;
			case 121:
				{
				_localctx = new AMOUNT_REF_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1168;
				Match(AMOUNT);
				State = 1169;
				Match(T__21);
				State = 1170;
				Match(NUM);
				State = 1171;
				Match(T__22);
				}
				break;
			case 122:
				{
				_localctx = new VOL_REF_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1172;
				Match(VOL);
				State = 1173;
				Match(T__21);
				State = 1174;
				Match(NUM);
				State = 1175;
				Match(T__22);
				}
				break;
			case 123:
				{
				_localctx = new TURN_REF_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1176;
				Match(TURN);
				State = 1177;
				Match(T__21);
				State = 1178;
				Match(NUM);
				State = 1179;
				Match(T__22);
				}
				break;
			case 124:
				{
				_localctx = new INDEXA_REF_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1180;
				Match(INDEXA);
				State = 1181;
				Match(T__21);
				State = 1182;
				Match(NUM);
				State = 1183;
				Match(T__22);
				}
				break;
			case 125:
				{
				_localctx = new INDEXC_REF_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1184;
				Match(INDEXC);
				State = 1185;
				Match(T__21);
				State = 1186;
				Match(NUM);
				State = 1187;
				Match(T__22);
				}
				break;
			case 126:
				{
				_localctx = new INDEXH_REF_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1188;
				Match(INDEXH);
				State = 1189;
				Match(T__21);
				State = 1190;
				Match(NUM);
				State = 1191;
				Match(T__22);
				}
				break;
			case 127:
				{
				_localctx = new INDEXL_REF_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1192;
				Match(INDEXL);
				State = 1193;
				Match(T__21);
				State = 1194;
				Match(NUM);
				State = 1195;
				Match(T__22);
				}
				break;
			case 128:
				{
				_localctx = new INDEXO_REF_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1196;
				Match(INDEXO);
				State = 1197;
				Match(T__21);
				State = 1198;
				Match(NUM);
				State = 1199;
				Match(T__22);
				}
				break;
			case 129:
				{
				_localctx = new INDEXV_REF_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1200;
				Match(INDEXV);
				State = 1201;
				Match(T__21);
				State = 1202;
				Match(NUM);
				State = 1203;
				Match(T__22);
				}
				break;
			case 130:
				{
				_localctx = new DATE_REF_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1204;
				Match(DATE);
				State = 1205;
				Match(T__21);
				State = 1206;
				Match(NUM);
				State = 1207;
				Match(T__22);
				}
				break;
			case 131:
				{
				_localctx = new TIME_REF_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1208;
				Match(TIME);
				State = 1209;
				Match(T__21);
				State = 1210;
				Match(NUM);
				State = 1211;
				Match(T__22);
				}
				break;
			case 132:
				{
				_localctx = new YEAR_REF_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1212;
				Match(YEAR);
				State = 1213;
				Match(T__21);
				State = 1214;
				Match(NUM);
				State = 1215;
				Match(T__22);
				}
				break;
			case 133:
				{
				_localctx = new MONTH_REF_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1216;
				Match(MONTH);
				State = 1217;
				Match(T__21);
				State = 1218;
				Match(NUM);
				State = 1219;
				Match(T__22);
				}
				break;
			case 134:
				{
				_localctx = new WEEKDAY_REF_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1220;
				Match(WEEKDAY);
				State = 1221;
				Match(T__21);
				State = 1222;
				Match(NUM);
				State = 1223;
				Match(T__22);
				}
				break;
			case 135:
				{
				_localctx = new DAY_REF_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1224;
				Match(DAY);
				State = 1225;
				Match(T__21);
				State = 1226;
				Match(NUM);
				State = 1227;
				Match(T__22);
				}
				break;
			case 136:
				{
				_localctx = new HOUR_REF_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1228;
				Match(HOUR);
				State = 1229;
				Match(T__21);
				State = 1230;
				Match(NUM);
				State = 1231;
				Match(T__22);
				}
				break;
			case 137:
				{
				_localctx = new MINUTE_REF_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1232;
				Match(MINUTE);
				State = 1233;
				Match(T__21);
				State = 1234;
				Match(NUM);
				State = 1235;
				Match(T__22);
				}
				break;
			case 138:
				{
				_localctx = new DAYSTOTODAY_REF_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1236;
				Match(DAYSTOTODAY);
				State = 1237;
				Match(T__21);
				State = 1238;
				Match(NUM);
				State = 1239;
				Match(T__22);
				}
				break;
			case 139:
				{
				_localctx = new TIME2_REF_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1240;
				Match(TIME2);
				State = 1241;
				Match(T__21);
				State = 1242;
				Match(NUM);
				State = 1243;
				Match(T__22);
				}
				break;
			case 140:
				{
				_localctx = new RSI_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1244;
				Match(RSI);
				State = 1245;
				Match(T__4);
				State = 1246;
				expr(0);
				State = 1247;
				Match(T__5);
				}
				break;
			case 141:
				{
				_localctx = new WR_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1249;
				Match(WR);
				State = 1250;
				Match(T__4);
				State = 1251;
				expr(0);
				State = 1252;
				Match(T__5);
				}
				break;
			case 142:
				{
				_localctx = new BIAS_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1254;
				Match(BIAS);
				State = 1255;
				Match(T__4);
				State = 1256;
				expr(0);
				State = 1257;
				Match(T__5);
				}
				break;
			case 143:
				{
				_localctx = new CCI_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1259;
				Match(CCI);
				State = 1260;
				Match(T__4);
				State = 1261;
				expr(0);
				State = 1262;
				Match(T__5);
				}
				break;
			case 144:
				{
				_localctx = new ATR_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1264;
				Match(ATR);
				State = 1265;
				Match(T__4);
				State = 1266;
				expr(0);
				State = 1267;
				Match(T__5);
				}
				break;
			case 145:
				{
				_localctx = new BBI_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1269;
				Match(BBI);
				State = 1270;
				Match(T__4);
				State = 1271;
				expr(0);
				State = 1272;
				Match(T__2);
				State = 1273;
				expr(0);
				State = 1274;
				Match(T__2);
				State = 1275;
				expr(0);
				State = 1276;
				Match(T__2);
				State = 1277;
				expr(0);
				State = 1278;
				Match(T__5);
				}
				break;
			case 146:
				{
				_localctx = new VR_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1280;
				Match(VR);
				State = 1281;
				Match(T__4);
				State = 1282;
				expr(0);
				State = 1283;
				Match(T__5);
				}
				break;
			case 147:
				{
				_localctx = new OBV_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1285;
				Match(OBV);
				State = 1286;
				Match(T__4);
				State = 1287;
				Match(T__5);
				}
				break;
			case 148:
				{
				_localctx = new MFI_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1288;
				Match(MFI);
				State = 1289;
				Match(T__4);
				State = 1290;
				expr(0);
				State = 1291;
				Match(T__5);
				}
				break;
			case 149:
				{
				_localctx = new ASI_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1293;
				Match(ASI);
				State = 1294;
				Match(T__4);
				State = 1295;
				expr(0);
				State = 1296;
				Match(T__5);
				}
				break;
			case 150:
				{
				_localctx = new ROC_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1298;
				Match(ROC);
				State = 1299;
				Match(T__4);
				State = 1300;
				expr(0);
				State = 1301;
				Match(T__5);
				}
				break;
			case 151:
				{
				_localctx = new MASS_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1303;
				Match(MASS);
				State = 1304;
				Match(T__4);
				State = 1305;
				expr(0);
				State = 1306;
				Match(T__2);
				State = 1307;
				expr(0);
				State = 1308;
				Match(T__5);
				}
				break;
			case 152:
				{
				_localctx = new MTM_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1310;
				Match(MTM);
				State = 1311;
				Match(T__4);
				State = 1312;
				expr(0);
				State = 1313;
				Match(T__2);
				State = 1314;
				expr(0);
				State = 1315;
				Match(T__5);
				}
				break;
			case 153:
				{
				_localctx = new DPO_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1317;
				Match(DPO);
				State = 1318;
				Match(T__4);
				State = 1319;
				expr(0);
				State = 1320;
				Match(T__2);
				State = 1321;
				expr(0);
				State = 1322;
				Match(T__5);
				}
				break;
			case 154:
				{
				_localctx = new EMV_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1324;
				Match(EMV);
				State = 1325;
				Match(T__4);
				State = 1326;
				expr(0);
				State = 1327;
				Match(T__5);
				}
				break;
			case 155:
				{
				_localctx = new TRIX_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1329;
				Match(TRIX);
				State = 1330;
				Match(T__4);
				State = 1331;
				expr(0);
				State = 1332;
				Match(T__5);
				}
				break;
			case 156:
				{
				_localctx = new PSY_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1334;
				Match(PSY);
				State = 1335;
				Match(T__4);
				State = 1336;
				expr(0);
				State = 1337;
				Match(T__5);
				}
				break;
			case 157:
				{
				_localctx = new NUM_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1340;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SUB) {
					{
					State = 1339;
					Match(SUB);
					}
				}

				State = 1342;
				Match(NUM);
				}
				break;
			case 158:
				{
				_localctx = new REVERSE_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1343;
				Match(SUB);
				State = 1344;
				expr(28);
				}
				break;
			case 159:
				{
				_localctx = new TR_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1345;
				Match(TR);
				}
				break;
			case 160:
				{
				_localctx = new PARAMETER_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1346;
				Match(PARAMETER);
				}
				break;
			case 161:
				{
				_localctx = new PARAMETER_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1347;
				Match(HIGH);
				}
				break;
			case 162:
				{
				_localctx = new PARAMETER_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1348;
				Match(LOW);
				}
				break;
			case 163:
				{
				_localctx = new PARAMETER_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1349;
				Match(CLOSE);
				}
				break;
			case 164:
				{
				_localctx = new PARAMETER_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1350;
				Match(VOL);
				}
				break;
			case 165:
				{
				_localctx = new PARAMETER_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1351;
				Match(OPEN);
				}
				break;
			case 166:
				{
				_localctx = new PARAMETER_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1352;
				Match(AMOUNT);
				}
				break;
			case 167:
				{
				_localctx = new PARAMETER_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1353;
				Match(TURN);
				}
				break;
			case 168:
				{
				_localctx = new PARAMETER_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1354;
				Match(CAPITAL);
				}
				break;
			case 169:
				{
				_localctx = new PARAMETER_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1355;
				Match(INDEXA);
				}
				break;
			case 170:
				{
				_localctx = new PARAMETER_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1356;
				Match(INDEXC);
				}
				break;
			case 171:
				{
				_localctx = new PARAMETER_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1357;
				Match(INDEXH);
				}
				break;
			case 172:
				{
				_localctx = new PARAMETER_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1358;
				Match(INDEXL);
				}
				break;
			case 173:
				{
				_localctx = new PARAMETER_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1359;
				Match(INDEXO);
				}
				break;
			case 174:
				{
				_localctx = new PARAMETER_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1360;
				Match(INDEXV);
				}
				break;
			case 175:
				{
				_localctx = new PARAMETER_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1361;
				Match(DATE);
				}
				break;
			case 176:
				{
				_localctx = new PARAMETER_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1362;
				Match(TIME);
				}
				break;
			case 177:
				{
				_localctx = new PARAMETER_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1363;
				Match(YEAR);
				}
				break;
			case 178:
				{
				_localctx = new PARAMETER_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1364;
				Match(MONTH);
				}
				break;
			case 179:
				{
				_localctx = new PARAMETER_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1365;
				Match(DAY);
				}
				break;
			case 180:
				{
				_localctx = new PARAMETER_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1366;
				Match(HOUR);
				}
				break;
			case 181:
				{
				_localctx = new PARAMETER_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1367;
				Match(MINUTE);
				}
				break;
			case 182:
				{
				_localctx = new PARAMETER_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1368;
				Match(WEEKDAY);
				}
				break;
			case 183:
				{
				_localctx = new PARAMETER_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1369;
				Match(DAYSTOTODAY);
				}
				break;
			case 184:
				{
				_localctx = new PARAMETER_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1370;
				Match(TIME2);
				}
				break;
			case 185:
				{
				_localctx = new DRAWNULL_funContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1371;
				Match(DRAWNULL);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1394;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1392;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
					case 1:
						{
						_localctx = new MulDiv_funContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1374;
						if (!(Precpred(Context, 190))) throw new FailedPredicateException(this, "Precpred(Context, 190)");
						State = 1375;
						((MulDiv_funContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__6 || _la==T__7) ) {
							((MulDiv_funContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1376;
						expr(191);
						}
						break;
					case 2:
						{
						_localctx = new AddSub_funContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1377;
						if (!(Precpred(Context, 189))) throw new FailedPredicateException(this, "Precpred(Context, 189)");
						State = 1378;
						((AddSub_funContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__8 || _la==SUB) ) {
							((AddSub_funContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1379;
						expr(190);
						}
						break;
					case 3:
						{
						_localctx = new Judge_funContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1380;
						if (!(Precpred(Context, 188))) throw new FailedPredicateException(this, "Precpred(Context, 188)");
						State = 1381;
						((Judge_funContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12))) != 0)) ) {
							((Judge_funContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1382;
						expr(189);
						}
						break;
					case 4:
						{
						_localctx = new Judge_funContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1383;
						if (!(Precpred(Context, 187))) throw new FailedPredicateException(this, "Precpred(Context, 187)");
						State = 1384;
						((Judge_funContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18))) != 0)) ) {
							((Judge_funContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1385;
						expr(188);
						}
						break;
					case 5:
						{
						_localctx = new AndOr_funContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1386;
						if (!(Precpred(Context, 186))) throw new FailedPredicateException(this, "Precpred(Context, 186)");
						State = 1387;
						((AndOr_funContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__19 || _la==AND) ) {
							((AndOr_funContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1388;
						expr(187);
						}
						break;
					case 6:
						{
						_localctx = new AndOr_funContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1389;
						if (!(Precpred(Context, 185))) throw new FailedPredicateException(this, "Precpred(Context, 185)");
						State = 1390;
						((AndOr_funContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__20 || _la==OR) ) {
							((AndOr_funContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1391;
						expr(186);
						}
						break;
					}
					} 
				}
				State = 1396;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 5: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 190);
		case 1: return Precpred(Context, 189);
		case 2: return Precpred(Context, 188);
		case 3: return Precpred(Context, 187);
		case 4: return Precpred(Context, 186);
		case 5: return Precpred(Context, 185);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,211,1398,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,1,0,4,0,14,
		8,0,11,0,12,0,15,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,5,1,26,8,1,10,1,12,1,
		29,9,1,3,1,31,8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,1,40,8,1,11,1,12,1,41,
		1,1,1,1,1,1,1,1,1,1,1,1,5,1,50,8,1,10,1,12,1,53,9,1,3,1,55,8,1,1,1,1,1,
		1,1,1,1,1,1,4,1,62,8,1,11,1,12,1,63,1,1,1,1,1,1,1,1,1,1,1,1,5,1,72,8,1,
		10,1,12,1,75,9,1,3,1,77,8,1,1,1,1,1,1,1,1,1,1,1,4,1,84,8,1,11,1,12,1,85,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,96,8,1,10,1,12,1,99,9,1,3,1,101,8,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,1,110,8,1,11,1,12,1,111,1,1,1,1,3,1,116,
		8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,133,
		8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,145,8,3,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
		1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
		1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
		1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
		1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,299,8,4,1,5,1,5,1,5,1,5,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,4,5,581,8,5,11,5,12,5,582,
		1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,4,5,594,8,5,11,5,12,5,595,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,1,5,1,5,4,5,607,8,5,11,5,12,5,608,1,5,1,5,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,4,5,620,8,5,11,5,12,5,621,1,5,1,5,1,5,1,5,1,5,1,5,
		1,5,1,5,1,5,4,5,633,8,5,11,5,12,5,634,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,4,5,936,8,5,11,5,12,5,937,
		1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,4,5,949,8,5,11,5,12,5,950,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
		1,5,3,5,1341,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,
		1373,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,5,5,1393,8,5,10,5,12,5,1396,9,5,1,5,0,1,10,6,0,2,4,6,8,10,0,
		7,1,0,1,2,1,0,7,8,2,0,9,9,24,24,1,0,10,13,1,0,14,19,2,0,20,20,117,117,
		2,0,21,21,118,118,1637,0,13,1,0,0,0,2,115,1,0,0,0,4,132,1,0,0,0,6,144,
		1,0,0,0,8,298,1,0,0,0,10,1372,1,0,0,0,12,14,3,2,1,0,13,12,1,0,0,0,14,15,
		1,0,0,0,15,13,1,0,0,0,15,16,1,0,0,0,16,17,1,0,0,0,17,18,5,0,0,1,18,1,1,
		0,0,0,19,20,5,209,0,0,20,21,7,0,0,0,21,30,3,10,5,0,22,27,5,194,0,0,23,
		24,5,3,0,0,24,26,3,4,2,0,25,23,1,0,0,0,26,29,1,0,0,0,27,25,1,0,0,0,27,
		28,1,0,0,0,28,31,1,0,0,0,29,27,1,0,0,0,30,22,1,0,0,0,30,31,1,0,0,0,31,
		32,1,0,0,0,32,33,5,4,0,0,33,116,1,0,0,0,34,35,5,209,0,0,35,36,7,0,0,0,
		36,39,3,10,5,0,37,38,5,3,0,0,38,40,3,4,2,0,39,37,1,0,0,0,40,41,1,0,0,0,
		41,39,1,0,0,0,41,42,1,0,0,0,42,43,1,0,0,0,43,44,5,4,0,0,44,116,1,0,0,0,
		45,54,3,10,5,0,46,51,5,194,0,0,47,48,5,3,0,0,48,50,3,4,2,0,49,47,1,0,0,
		0,50,53,1,0,0,0,51,49,1,0,0,0,51,52,1,0,0,0,52,55,1,0,0,0,53,51,1,0,0,
		0,54,46,1,0,0,0,54,55,1,0,0,0,55,56,1,0,0,0,56,57,5,4,0,0,57,116,1,0,0,
		0,58,61,3,10,5,0,59,60,5,3,0,0,60,62,3,4,2,0,61,59,1,0,0,0,62,63,1,0,0,
		0,63,61,1,0,0,0,63,64,1,0,0,0,64,65,1,0,0,0,65,66,5,4,0,0,66,116,1,0,0,
		0,67,76,3,8,4,0,68,73,5,194,0,0,69,70,5,3,0,0,70,72,3,4,2,0,71,69,1,0,
		0,0,72,75,1,0,0,0,73,71,1,0,0,0,73,74,1,0,0,0,74,77,1,0,0,0,75,73,1,0,
		0,0,76,68,1,0,0,0,76,77,1,0,0,0,77,78,1,0,0,0,78,79,5,4,0,0,79,116,1,0,
		0,0,80,83,3,8,4,0,81,82,5,3,0,0,82,84,3,4,2,0,83,81,1,0,0,0,84,85,1,0,
		0,0,85,83,1,0,0,0,85,86,1,0,0,0,86,87,1,0,0,0,87,88,5,4,0,0,88,116,1,0,
		0,0,89,90,5,209,0,0,90,91,7,0,0,0,91,100,3,8,4,0,92,97,5,194,0,0,93,94,
		5,3,0,0,94,96,3,4,2,0,95,93,1,0,0,0,96,99,1,0,0,0,97,95,1,0,0,0,97,98,
		1,0,0,0,98,101,1,0,0,0,99,97,1,0,0,0,100,92,1,0,0,0,100,101,1,0,0,0,101,
		102,1,0,0,0,102,103,5,4,0,0,103,116,1,0,0,0,104,105,5,209,0,0,105,106,
		7,0,0,0,106,109,3,8,4,0,107,108,5,3,0,0,108,110,3,4,2,0,109,107,1,0,0,
		0,110,111,1,0,0,0,111,109,1,0,0,0,111,112,1,0,0,0,112,113,1,0,0,0,113,
		114,5,4,0,0,114,116,1,0,0,0,115,19,1,0,0,0,115,34,1,0,0,0,115,45,1,0,0,
		0,115,58,1,0,0,0,115,67,1,0,0,0,115,80,1,0,0,0,115,89,1,0,0,0,115,104,
		1,0,0,0,116,3,1,0,0,0,117,133,3,6,3,0,118,133,5,195,0,0,119,133,5,196,
		0,0,120,133,5,197,0,0,121,133,5,198,0,0,122,133,5,199,0,0,123,133,5,200,
		0,0,124,133,5,201,0,0,125,133,5,202,0,0,126,133,5,203,0,0,127,133,5,204,
		0,0,128,133,5,205,0,0,129,133,5,206,0,0,130,133,5,207,0,0,131,133,5,208,
		0,0,132,117,1,0,0,0,132,118,1,0,0,0,132,119,1,0,0,0,132,120,1,0,0,0,132,
		121,1,0,0,0,132,122,1,0,0,0,132,123,1,0,0,0,132,124,1,0,0,0,132,125,1,
		0,0,0,132,126,1,0,0,0,132,127,1,0,0,0,132,128,1,0,0,0,132,129,1,0,0,0,
		132,130,1,0,0,0,132,131,1,0,0,0,133,5,1,0,0,0,134,145,5,194,0,0,135,136,
		5,189,0,0,136,137,5,5,0,0,137,138,3,10,5,0,138,139,5,3,0,0,139,140,3,10,
		5,0,140,141,5,3,0,0,141,142,3,10,5,0,142,143,5,6,0,0,143,145,1,0,0,0,144,
		134,1,0,0,0,144,135,1,0,0,0,145,7,1,0,0,0,146,147,5,184,0,0,147,148,5,
		5,0,0,148,149,3,10,5,0,149,150,5,3,0,0,150,151,3,10,5,0,151,152,5,3,0,
		0,152,153,5,26,0,0,153,154,5,6,0,0,154,299,1,0,0,0,155,156,5,191,0,0,156,
		157,5,5,0,0,157,158,3,10,5,0,158,159,5,3,0,0,159,160,3,10,5,0,160,161,
		5,3,0,0,161,162,5,26,0,0,162,163,5,6,0,0,163,299,1,0,0,0,164,165,5,186,
		0,0,165,166,5,5,0,0,166,167,3,10,5,0,167,168,5,3,0,0,168,169,3,10,5,0,
		169,170,5,3,0,0,170,171,3,10,5,0,171,172,5,3,0,0,172,173,3,10,5,0,173,
		174,5,3,0,0,174,175,5,26,0,0,175,176,5,6,0,0,176,299,1,0,0,0,177,178,5,
		192,0,0,178,179,5,5,0,0,179,180,3,10,5,0,180,181,5,3,0,0,181,182,3,10,
		5,0,182,183,5,3,0,0,183,184,3,10,5,0,184,185,5,3,0,0,185,186,3,10,5,0,
		186,187,5,3,0,0,187,188,5,26,0,0,188,189,5,3,0,0,189,190,3,10,5,0,190,
		191,5,6,0,0,191,299,1,0,0,0,192,193,5,183,0,0,193,194,5,5,0,0,194,195,
		3,10,5,0,195,196,5,3,0,0,196,197,3,10,5,0,197,198,5,3,0,0,198,199,5,25,
		0,0,199,200,5,6,0,0,200,299,1,0,0,0,201,202,5,187,0,0,202,203,5,5,0,0,
		203,204,3,10,5,0,204,205,5,3,0,0,205,206,3,10,5,0,206,207,5,3,0,0,207,
		208,5,25,0,0,208,209,5,6,0,0,209,299,1,0,0,0,210,211,5,188,0,0,211,212,
		5,5,0,0,212,213,3,10,5,0,213,214,5,3,0,0,214,215,3,10,5,0,215,216,5,3,
		0,0,216,217,5,25,0,0,217,218,5,6,0,0,218,299,1,0,0,0,219,220,5,180,0,0,
		220,221,5,5,0,0,221,222,3,10,5,0,222,223,5,3,0,0,223,224,3,10,5,0,224,
		225,5,3,0,0,225,226,3,10,5,0,226,227,5,3,0,0,227,228,3,10,5,0,228,229,
		5,3,0,0,229,230,3,10,5,0,230,231,5,6,0,0,231,299,1,0,0,0,232,233,5,181,
		0,0,233,234,5,5,0,0,234,235,3,10,5,0,235,236,5,3,0,0,236,237,3,10,5,0,
		237,238,5,3,0,0,238,239,3,10,5,0,239,240,5,3,0,0,240,241,3,10,5,0,241,
		242,5,6,0,0,242,299,1,0,0,0,243,244,5,185,0,0,244,245,5,5,0,0,245,246,
		3,10,5,0,246,247,5,3,0,0,247,248,3,10,5,0,248,249,5,3,0,0,249,250,3,10,
		5,0,250,251,5,3,0,0,251,252,3,10,5,0,252,253,5,3,0,0,253,254,3,10,5,0,
		254,255,5,6,0,0,255,299,1,0,0,0,256,257,5,190,0,0,257,258,5,5,0,0,258,
		259,3,10,5,0,259,260,5,3,0,0,260,261,3,10,5,0,261,262,5,3,0,0,262,263,
		3,6,3,0,263,264,5,6,0,0,264,299,1,0,0,0,265,266,5,193,0,0,266,267,5,5,
		0,0,267,268,3,10,5,0,268,269,5,3,0,0,269,270,3,10,5,0,270,271,5,3,0,0,
		271,272,3,10,5,0,272,273,5,3,0,0,273,274,3,10,5,0,274,275,5,3,0,0,275,
		276,3,6,3,0,276,277,5,6,0,0,277,299,1,0,0,0,278,279,5,182,0,0,279,280,
		5,5,0,0,280,281,3,10,5,0,281,282,5,3,0,0,282,283,3,10,5,0,283,284,5,3,
		0,0,284,285,3,10,5,0,285,286,5,3,0,0,286,287,3,10,5,0,287,288,5,3,0,0,
		288,289,3,10,5,0,289,290,5,6,0,0,290,299,1,0,0,0,291,292,5,179,0,0,292,
		293,5,5,0,0,293,294,3,10,5,0,294,295,5,3,0,0,295,296,3,10,5,0,296,297,
		5,6,0,0,297,299,1,0,0,0,298,146,1,0,0,0,298,155,1,0,0,0,298,164,1,0,0,
		0,298,177,1,0,0,0,298,192,1,0,0,0,298,201,1,0,0,0,298,210,1,0,0,0,298,
		219,1,0,0,0,298,232,1,0,0,0,298,243,1,0,0,0,298,256,1,0,0,0,298,265,1,
		0,0,0,298,278,1,0,0,0,298,291,1,0,0,0,299,9,1,0,0,0,300,301,6,5,-1,0,301,
		302,5,5,0,0,302,303,3,10,5,0,303,304,5,6,0,0,304,1373,1,0,0,0,305,306,
		5,70,0,0,306,307,5,5,0,0,307,308,3,10,5,0,308,309,5,3,0,0,309,310,3,10,
		5,0,310,311,5,6,0,0,311,1373,1,0,0,0,312,313,5,79,0,0,313,314,5,5,0,0,
		314,315,3,10,5,0,315,316,5,3,0,0,316,317,3,10,5,0,317,318,5,3,0,0,318,
		319,3,10,5,0,319,320,5,6,0,0,320,1373,1,0,0,0,321,322,5,80,0,0,322,323,
		5,5,0,0,323,324,3,10,5,0,324,325,5,3,0,0,325,326,3,10,5,0,326,327,5,6,
		0,0,327,1373,1,0,0,0,328,329,5,81,0,0,329,330,5,5,0,0,330,331,3,10,5,0,
		331,332,5,3,0,0,332,333,3,10,5,0,333,334,5,6,0,0,334,1373,1,0,0,0,335,
		336,5,94,0,0,336,337,5,5,0,0,337,338,3,10,5,0,338,339,5,3,0,0,339,340,
		3,10,5,0,340,341,5,3,0,0,341,342,3,10,5,0,342,343,5,6,0,0,343,1373,1,0,
		0,0,344,345,5,82,0,0,345,346,5,5,0,0,346,347,3,10,5,0,347,348,5,3,0,0,
		348,349,3,10,5,0,349,350,5,6,0,0,350,1373,1,0,0,0,351,352,5,93,0,0,352,
		353,5,5,0,0,353,354,3,10,5,0,354,355,5,3,0,0,355,356,3,10,5,0,356,357,
		5,6,0,0,357,1373,1,0,0,0,358,359,5,95,0,0,359,360,5,5,0,0,360,361,3,10,
		5,0,361,362,5,3,0,0,362,363,3,10,5,0,363,364,5,6,0,0,364,1373,1,0,0,0,
		365,366,5,71,0,0,366,367,5,5,0,0,367,368,3,10,5,0,368,369,5,3,0,0,369,
		370,3,10,5,0,370,371,5,6,0,0,371,1373,1,0,0,0,372,373,5,72,0,0,373,374,
		5,5,0,0,374,375,3,10,5,0,375,376,5,3,0,0,376,377,3,10,5,0,377,378,5,6,
		0,0,378,1373,1,0,0,0,379,380,5,73,0,0,380,381,5,5,0,0,381,382,3,10,5,0,
		382,383,5,3,0,0,383,384,3,10,5,0,384,385,5,6,0,0,385,1373,1,0,0,0,386,
		387,5,74,0,0,387,388,5,5,0,0,388,389,3,10,5,0,389,390,5,3,0,0,390,391,
		3,10,5,0,391,392,5,6,0,0,392,1373,1,0,0,0,393,394,5,88,0,0,394,395,5,5,
		0,0,395,396,3,10,5,0,396,397,5,3,0,0,397,398,3,10,5,0,398,399,5,6,0,0,
		399,1373,1,0,0,0,400,401,5,89,0,0,401,402,5,5,0,0,402,403,3,10,5,0,403,
		404,5,3,0,0,404,405,3,10,5,0,405,406,5,6,0,0,406,1373,1,0,0,0,407,408,
		5,69,0,0,408,409,5,5,0,0,409,410,3,10,5,0,410,411,5,3,0,0,411,412,3,10,
		5,0,412,413,5,6,0,0,413,1373,1,0,0,0,414,415,5,77,0,0,415,416,5,5,0,0,
		416,417,3,10,5,0,417,418,5,3,0,0,418,419,3,10,5,0,419,420,5,6,0,0,420,
		1373,1,0,0,0,421,422,5,75,0,0,422,423,5,5,0,0,423,424,3,10,5,0,424,425,
		5,3,0,0,425,426,3,10,5,0,426,427,5,6,0,0,427,1373,1,0,0,0,428,429,5,76,
		0,0,429,430,5,5,0,0,430,431,3,10,5,0,431,432,5,3,0,0,432,433,3,10,5,0,
		433,434,5,6,0,0,434,1373,1,0,0,0,435,436,5,84,0,0,436,437,5,5,0,0,437,
		438,3,10,5,0,438,439,5,6,0,0,439,1373,1,0,0,0,440,441,5,66,0,0,441,442,
		5,5,0,0,442,443,3,10,5,0,443,444,5,6,0,0,444,1373,1,0,0,0,445,446,5,67,
		0,0,446,447,5,5,0,0,447,448,3,10,5,0,448,449,5,6,0,0,449,1373,1,0,0,0,
		450,451,5,68,0,0,451,452,5,5,0,0,452,453,3,10,5,0,453,454,5,3,0,0,454,
		455,3,10,5,0,455,456,5,6,0,0,456,1373,1,0,0,0,457,458,5,87,0,0,458,459,
		5,5,0,0,459,460,3,10,5,0,460,461,5,6,0,0,461,1373,1,0,0,0,462,463,5,78,
		0,0,463,464,5,5,0,0,464,465,3,10,5,0,465,466,5,3,0,0,466,467,3,10,5,0,
		467,468,5,6,0,0,468,1373,1,0,0,0,469,470,5,85,0,0,470,471,5,5,0,0,471,
		472,3,10,5,0,472,473,5,3,0,0,473,474,3,10,5,0,474,475,5,6,0,0,475,1373,
		1,0,0,0,476,477,5,86,0,0,477,478,5,5,0,0,478,479,3,10,5,0,479,480,5,6,
		0,0,480,1373,1,0,0,0,481,482,5,90,0,0,482,483,5,5,0,0,483,484,3,10,5,0,
		484,485,5,3,0,0,485,486,3,10,5,0,486,487,5,6,0,0,487,1373,1,0,0,0,488,
		489,5,91,0,0,489,490,5,5,0,0,490,491,3,10,5,0,491,492,5,3,0,0,492,493,
		3,10,5,0,493,494,5,6,0,0,494,1373,1,0,0,0,495,496,5,96,0,0,496,497,5,5,
		0,0,497,498,3,10,5,0,498,499,5,6,0,0,499,1373,1,0,0,0,500,501,5,97,0,0,
		501,502,5,5,0,0,502,503,3,10,5,0,503,504,5,6,0,0,504,1373,1,0,0,0,505,
		506,5,98,0,0,506,507,5,5,0,0,507,508,3,10,5,0,508,509,5,3,0,0,509,510,
		3,10,5,0,510,511,5,3,0,0,511,512,3,10,5,0,512,513,5,3,0,0,513,514,3,10,
		5,0,514,515,5,6,0,0,515,1373,1,0,0,0,516,517,5,99,0,0,517,518,5,5,0,0,
		518,519,3,10,5,0,519,520,5,3,0,0,520,521,3,10,5,0,521,522,5,3,0,0,522,
		523,3,10,5,0,523,524,5,3,0,0,524,525,3,10,5,0,525,526,5,6,0,0,526,1373,
		1,0,0,0,527,528,5,100,0,0,528,529,5,5,0,0,529,530,3,10,5,0,530,531,5,3,
		0,0,531,532,3,10,5,0,532,533,5,3,0,0,533,534,3,10,5,0,534,535,5,3,0,0,
		535,536,3,10,5,0,536,537,5,6,0,0,537,1373,1,0,0,0,538,539,5,101,0,0,539,
		540,5,5,0,0,540,541,3,10,5,0,541,542,5,3,0,0,542,543,3,10,5,0,543,544,
		5,3,0,0,544,545,3,10,5,0,545,546,5,3,0,0,546,547,3,10,5,0,547,548,5,6,
		0,0,548,1373,1,0,0,0,549,550,5,102,0,0,550,551,5,5,0,0,551,552,3,10,5,
		0,552,553,5,3,0,0,553,554,3,10,5,0,554,555,5,6,0,0,555,1373,1,0,0,0,556,
		557,5,103,0,0,557,558,5,5,0,0,558,559,3,10,5,0,559,560,5,3,0,0,560,561,
		3,10,5,0,561,562,5,6,0,0,562,1373,1,0,0,0,563,564,5,104,0,0,564,565,5,
		5,0,0,565,566,3,10,5,0,566,567,5,3,0,0,567,568,3,10,5,0,568,569,5,6,0,
		0,569,1373,1,0,0,0,570,571,5,105,0,0,571,572,5,5,0,0,572,573,3,10,5,0,
		573,574,5,6,0,0,574,1373,1,0,0,0,575,576,5,71,0,0,576,577,5,5,0,0,577,
		580,3,10,5,0,578,579,5,3,0,0,579,581,3,10,5,0,580,578,1,0,0,0,581,582,
		1,0,0,0,582,580,1,0,0,0,582,583,1,0,0,0,583,584,1,0,0,0,584,585,5,3,0,
		0,585,586,5,25,0,0,586,587,5,6,0,0,587,1373,1,0,0,0,588,589,5,73,0,0,589,
		590,5,5,0,0,590,593,3,10,5,0,591,592,5,3,0,0,592,594,3,10,5,0,593,591,
		1,0,0,0,594,595,1,0,0,0,595,593,1,0,0,0,595,596,1,0,0,0,596,597,1,0,0,
		0,597,598,5,3,0,0,598,599,5,25,0,0,599,600,5,6,0,0,600,1373,1,0,0,0,601,
		602,5,88,0,0,602,603,5,5,0,0,603,606,3,10,5,0,604,605,5,3,0,0,605,607,
		3,10,5,0,606,604,1,0,0,0,607,608,1,0,0,0,608,606,1,0,0,0,608,609,1,0,0,
		0,609,610,1,0,0,0,610,611,5,3,0,0,611,612,5,25,0,0,612,613,5,6,0,0,613,
		1373,1,0,0,0,614,615,5,89,0,0,615,616,5,5,0,0,616,619,3,10,5,0,617,618,
		5,3,0,0,618,620,3,10,5,0,619,617,1,0,0,0,620,621,1,0,0,0,621,619,1,0,0,
		0,621,622,1,0,0,0,622,623,1,0,0,0,623,624,5,3,0,0,624,625,5,25,0,0,625,
		626,5,6,0,0,626,1373,1,0,0,0,627,628,5,77,0,0,628,629,5,5,0,0,629,632,
		3,10,5,0,630,631,5,3,0,0,631,633,3,10,5,0,632,630,1,0,0,0,633,634,1,0,
		0,0,634,632,1,0,0,0,634,635,1,0,0,0,635,636,1,0,0,0,636,637,5,3,0,0,637,
		638,5,25,0,0,638,639,5,6,0,0,639,1373,1,0,0,0,640,641,5,119,0,0,641,642,
		5,5,0,0,642,643,3,10,5,0,643,644,5,3,0,0,644,645,3,10,5,0,645,646,5,3,
		0,0,646,647,3,10,5,0,647,648,5,6,0,0,648,1373,1,0,0,0,649,650,5,120,0,
		0,650,651,5,5,0,0,651,652,3,10,5,0,652,653,5,3,0,0,653,654,3,10,5,0,654,
		655,5,3,0,0,655,656,3,10,5,0,656,657,5,6,0,0,657,1373,1,0,0,0,658,659,
		5,121,0,0,659,660,5,5,0,0,660,661,3,10,5,0,661,662,5,3,0,0,662,663,3,10,
		5,0,663,664,5,6,0,0,664,1373,1,0,0,0,665,666,5,106,0,0,666,667,5,5,0,0,
		667,668,3,10,5,0,668,669,5,3,0,0,669,670,3,10,5,0,670,671,5,6,0,0,671,
		1373,1,0,0,0,672,673,5,114,0,0,673,674,5,5,0,0,674,675,3,10,5,0,675,676,
		5,3,0,0,676,677,3,10,5,0,677,678,5,3,0,0,678,679,3,10,5,0,679,680,5,6,
		0,0,680,1373,1,0,0,0,681,682,5,107,0,0,682,683,5,5,0,0,683,684,3,10,5,
		0,684,685,5,3,0,0,685,686,3,10,5,0,686,687,5,6,0,0,687,1373,1,0,0,0,688,
		689,5,108,0,0,689,690,5,5,0,0,690,691,3,10,5,0,691,692,5,3,0,0,692,693,
		3,10,5,0,693,694,5,6,0,0,694,1373,1,0,0,0,695,696,5,109,0,0,696,697,5,
		5,0,0,697,698,3,10,5,0,698,699,5,3,0,0,699,700,3,10,5,0,700,701,5,3,0,
		0,701,702,3,10,5,0,702,703,5,6,0,0,703,1373,1,0,0,0,704,705,5,110,0,0,
		705,706,5,5,0,0,706,707,3,10,5,0,707,708,5,3,0,0,708,709,3,10,5,0,709,
		710,5,6,0,0,710,1373,1,0,0,0,711,712,5,111,0,0,712,713,5,5,0,0,713,714,
		3,10,5,0,714,715,5,3,0,0,715,716,3,10,5,0,716,717,5,3,0,0,717,718,3,10,
		5,0,718,719,5,6,0,0,719,1373,1,0,0,0,720,721,5,112,0,0,721,722,5,5,0,0,
		722,723,3,10,5,0,723,724,5,3,0,0,724,725,3,10,5,0,725,726,5,6,0,0,726,
		1373,1,0,0,0,727,728,5,113,0,0,728,729,5,5,0,0,729,730,3,10,5,0,730,731,
		5,3,0,0,731,732,3,10,5,0,732,733,5,3,0,0,733,734,3,10,5,0,734,735,5,6,
		0,0,735,1373,1,0,0,0,736,737,5,115,0,0,737,738,5,5,0,0,738,739,3,10,5,
		0,739,740,5,6,0,0,740,1373,1,0,0,0,741,742,5,116,0,0,742,743,5,5,0,0,743,
		744,3,10,5,0,744,745,5,6,0,0,745,1373,1,0,0,0,746,747,5,83,0,0,747,748,
		5,5,0,0,748,749,3,10,5,0,749,750,5,3,0,0,750,751,3,10,5,0,751,752,5,3,
		0,0,752,753,3,10,5,0,753,754,5,6,0,0,754,1373,1,0,0,0,755,756,5,122,0,
		0,756,757,5,5,0,0,757,758,3,10,5,0,758,759,5,3,0,0,759,760,3,10,5,0,760,
		761,5,6,0,0,761,1373,1,0,0,0,762,763,5,123,0,0,763,764,5,5,0,0,764,765,
		3,10,5,0,765,766,5,3,0,0,766,767,3,10,5,0,767,768,5,3,0,0,768,769,3,10,
		5,0,769,770,5,3,0,0,770,771,3,10,5,0,771,772,5,3,0,0,772,773,3,10,5,0,
		773,774,5,3,0,0,774,775,3,10,5,0,775,776,5,6,0,0,776,1373,1,0,0,0,777,
		778,5,124,0,0,778,779,5,5,0,0,779,780,3,10,5,0,780,781,5,3,0,0,781,782,
		3,10,5,0,782,783,5,6,0,0,783,1373,1,0,0,0,784,785,5,125,0,0,785,786,5,
		5,0,0,786,787,3,10,5,0,787,788,5,3,0,0,788,789,3,10,5,0,789,790,5,3,0,
		0,790,791,3,10,5,0,791,792,5,3,0,0,792,793,3,10,5,0,793,794,5,3,0,0,794,
		795,3,10,5,0,795,796,5,3,0,0,796,797,3,10,5,0,797,798,5,6,0,0,798,1373,
		1,0,0,0,799,800,5,126,0,0,800,801,5,5,0,0,801,802,3,10,5,0,802,803,5,6,
		0,0,803,1373,1,0,0,0,804,805,5,127,0,0,805,806,5,5,0,0,806,807,3,10,5,
		0,807,808,5,6,0,0,808,1373,1,0,0,0,809,810,5,128,0,0,810,811,5,5,0,0,811,
		812,3,10,5,0,812,813,5,6,0,0,813,1373,1,0,0,0,814,815,5,129,0,0,815,816,
		5,5,0,0,816,817,3,10,5,0,817,818,5,6,0,0,818,1373,1,0,0,0,819,820,5,130,
		0,0,820,821,5,5,0,0,821,822,3,10,5,0,822,823,5,6,0,0,823,1373,1,0,0,0,
		824,825,5,131,0,0,825,826,5,5,0,0,826,827,3,10,5,0,827,828,5,6,0,0,828,
		1373,1,0,0,0,829,830,5,132,0,0,830,831,5,5,0,0,831,832,3,10,5,0,832,833,
		5,6,0,0,833,1373,1,0,0,0,834,835,5,133,0,0,835,836,5,5,0,0,836,837,3,10,
		5,0,837,838,5,6,0,0,838,1373,1,0,0,0,839,840,5,134,0,0,840,841,5,5,0,0,
		841,842,3,10,5,0,842,843,5,6,0,0,843,1373,1,0,0,0,844,845,5,138,0,0,845,
		846,5,5,0,0,846,847,3,10,5,0,847,848,5,6,0,0,848,1373,1,0,0,0,849,850,
		5,137,0,0,850,851,5,5,0,0,851,852,3,10,5,0,852,853,5,6,0,0,853,1373,1,
		0,0,0,854,855,5,136,0,0,855,856,5,5,0,0,856,857,3,10,5,0,857,858,5,3,0,
		0,858,859,3,10,5,0,859,860,5,6,0,0,860,1373,1,0,0,0,861,862,5,139,0,0,
		862,863,5,5,0,0,863,864,3,10,5,0,864,865,5,6,0,0,865,1373,1,0,0,0,866,
		867,5,140,0,0,867,868,5,5,0,0,868,869,3,10,5,0,869,870,5,6,0,0,870,1373,
		1,0,0,0,871,872,5,141,0,0,872,873,5,5,0,0,873,874,3,10,5,0,874,875,5,6,
		0,0,875,1373,1,0,0,0,876,877,5,142,0,0,877,878,5,5,0,0,878,879,3,10,5,
		0,879,880,5,3,0,0,880,881,3,10,5,0,881,882,5,3,0,0,882,883,3,10,5,0,883,
		884,5,6,0,0,884,1373,1,0,0,0,885,886,5,143,0,0,886,887,5,5,0,0,887,888,
		3,10,5,0,888,889,5,6,0,0,889,1373,1,0,0,0,890,891,5,144,0,0,891,892,5,
		5,0,0,892,893,3,10,5,0,893,894,5,6,0,0,894,1373,1,0,0,0,895,896,5,144,
		0,0,896,897,5,5,0,0,897,898,3,10,5,0,898,899,5,3,0,0,899,900,3,10,5,0,
		900,901,5,6,0,0,901,1373,1,0,0,0,902,903,5,145,0,0,903,904,5,5,0,0,904,
		905,3,10,5,0,905,906,5,3,0,0,906,907,3,10,5,0,907,908,5,6,0,0,908,1373,
		1,0,0,0,909,910,5,146,0,0,910,911,5,5,0,0,911,912,3,10,5,0,912,913,5,6,
		0,0,913,1373,1,0,0,0,914,915,5,147,0,0,915,916,5,5,0,0,916,917,3,10,5,
		0,917,918,5,3,0,0,918,919,3,10,5,0,919,920,5,6,0,0,920,1373,1,0,0,0,921,
		922,5,134,0,0,922,923,5,5,0,0,923,924,3,10,5,0,924,925,5,3,0,0,925,926,
		5,25,0,0,926,927,5,6,0,0,927,1373,1,0,0,0,928,929,5,122,0,0,929,930,5,
		5,0,0,930,931,3,10,5,0,931,932,5,3,0,0,932,935,3,10,5,0,933,934,5,3,0,
		0,934,936,3,10,5,0,935,933,1,0,0,0,936,937,1,0,0,0,937,935,1,0,0,0,937,
		938,1,0,0,0,938,939,1,0,0,0,939,940,5,6,0,0,940,1373,1,0,0,0,941,942,5,
		124,0,0,942,943,5,5,0,0,943,944,3,10,5,0,944,945,5,3,0,0,945,948,3,10,
		5,0,946,947,5,3,0,0,947,949,3,10,5,0,948,946,1,0,0,0,949,950,1,0,0,0,950,
		948,1,0,0,0,950,951,1,0,0,0,951,952,1,0,0,0,952,953,5,6,0,0,953,1373,1,
		0,0,0,954,955,5,148,0,0,955,956,5,5,0,0,956,957,3,10,5,0,957,958,5,3,0,
		0,958,959,3,10,5,0,959,960,5,6,0,0,960,1373,1,0,0,0,961,962,5,149,0,0,
		962,963,5,5,0,0,963,964,3,10,5,0,964,965,5,3,0,0,965,966,3,10,5,0,966,
		967,5,6,0,0,967,1373,1,0,0,0,968,969,5,150,0,0,969,970,5,5,0,0,970,971,
		3,10,5,0,971,972,5,3,0,0,972,973,3,10,5,0,973,974,5,6,0,0,974,1373,1,0,
		0,0,975,976,5,151,0,0,976,977,5,5,0,0,977,978,3,10,5,0,978,979,5,3,0,0,
		979,980,3,10,5,0,980,981,5,6,0,0,981,1373,1,0,0,0,982,983,5,152,0,0,983,
		984,5,5,0,0,984,985,3,10,5,0,985,986,5,3,0,0,986,987,3,10,5,0,987,988,
		5,6,0,0,988,1373,1,0,0,0,989,990,5,153,0,0,990,991,5,5,0,0,991,992,3,10,
		5,0,992,993,5,3,0,0,993,994,3,10,5,0,994,995,5,6,0,0,995,1373,1,0,0,0,
		996,997,5,154,0,0,997,998,5,5,0,0,998,999,3,10,5,0,999,1000,5,3,0,0,1000,
		1001,3,10,5,0,1001,1002,5,6,0,0,1002,1373,1,0,0,0,1003,1004,5,155,0,0,
		1004,1005,5,5,0,0,1005,1006,3,10,5,0,1006,1007,5,3,0,0,1007,1008,3,10,
		5,0,1008,1009,5,6,0,0,1009,1373,1,0,0,0,1010,1011,5,156,0,0,1011,1012,
		5,5,0,0,1012,1013,3,10,5,0,1013,1014,5,3,0,0,1014,1015,3,10,5,0,1015,1016,
		5,6,0,0,1016,1373,1,0,0,0,1017,1018,5,157,0,0,1018,1019,5,5,0,0,1019,1020,
		3,10,5,0,1020,1021,5,3,0,0,1021,1022,3,10,5,0,1022,1023,5,3,0,0,1023,1024,
		3,10,5,0,1024,1025,5,6,0,0,1025,1373,1,0,0,0,1026,1027,5,158,0,0,1027,
		1028,5,5,0,0,1028,1029,3,10,5,0,1029,1030,5,3,0,0,1030,1031,3,10,5,0,1031,
		1032,5,3,0,0,1032,1033,3,10,5,0,1033,1034,5,6,0,0,1034,1373,1,0,0,0,1035,
		1036,5,159,0,0,1036,1037,5,5,0,0,1037,1038,3,10,5,0,1038,1039,5,6,0,0,
		1039,1373,1,0,0,0,1040,1041,5,160,0,0,1041,1042,5,5,0,0,1042,1043,3,10,
		5,0,1043,1044,5,3,0,0,1044,1045,3,10,5,0,1045,1046,5,3,0,0,1046,1047,3,
		10,5,0,1047,1048,5,6,0,0,1048,1373,1,0,0,0,1049,1050,5,161,0,0,1050,1051,
		5,5,0,0,1051,1052,3,10,5,0,1052,1053,5,3,0,0,1053,1054,3,10,5,0,1054,1055,
		5,3,0,0,1055,1056,3,10,5,0,1056,1057,5,6,0,0,1057,1373,1,0,0,0,1058,1059,
		5,162,0,0,1059,1060,5,5,0,0,1060,1061,3,10,5,0,1061,1062,5,3,0,0,1062,
		1063,3,10,5,0,1063,1064,5,3,0,0,1064,1065,3,10,5,0,1065,1066,5,6,0,0,1066,
		1373,1,0,0,0,1067,1068,5,163,0,0,1068,1069,5,5,0,0,1069,1070,3,10,5,0,
		1070,1071,5,3,0,0,1071,1072,3,10,5,0,1072,1073,5,3,0,0,1073,1074,3,10,
		5,0,1074,1075,5,6,0,0,1075,1373,1,0,0,0,1076,1077,5,164,0,0,1077,1078,
		5,5,0,0,1078,1079,3,10,5,0,1079,1080,5,3,0,0,1080,1081,3,10,5,0,1081,1082,
		5,3,0,0,1082,1083,3,10,5,0,1083,1084,5,6,0,0,1084,1373,1,0,0,0,1085,1086,
		5,165,0,0,1086,1087,5,5,0,0,1087,1088,3,10,5,0,1088,1089,5,3,0,0,1089,
		1090,3,10,5,0,1090,1091,5,3,0,0,1091,1092,3,10,5,0,1092,1093,5,6,0,0,1093,
		1373,1,0,0,0,1094,1095,5,166,0,0,1095,1096,5,5,0,0,1096,1097,3,10,5,0,
		1097,1098,5,6,0,0,1098,1373,1,0,0,0,1099,1100,5,168,0,0,1100,1101,5,5,
		0,0,1101,1102,3,10,5,0,1102,1103,5,3,0,0,1103,1104,3,10,5,0,1104,1105,
		5,6,0,0,1105,1373,1,0,0,0,1106,1107,5,169,0,0,1107,1108,5,5,0,0,1108,1109,
		3,10,5,0,1109,1110,5,3,0,0,1110,1111,3,10,5,0,1111,1112,5,6,0,0,1112,1373,
		1,0,0,0,1113,1114,5,170,0,0,1114,1115,5,5,0,0,1115,1116,3,10,5,0,1116,
		1117,5,3,0,0,1117,1118,3,10,5,0,1118,1119,5,6,0,0,1119,1373,1,0,0,0,1120,
		1121,5,171,0,0,1121,1122,5,5,0,0,1122,1123,3,10,5,0,1123,1124,5,6,0,0,
		1124,1373,1,0,0,0,1125,1126,5,167,0,0,1126,1127,5,5,0,0,1127,1128,3,10,
		5,0,1128,1129,5,3,0,0,1129,1130,3,10,5,0,1130,1131,5,6,0,0,1131,1373,1,
		0,0,0,1132,1133,5,172,0,0,1133,1134,5,5,0,0,1134,1135,3,10,5,0,1135,1136,
		5,3,0,0,1136,1137,3,10,5,0,1137,1138,5,6,0,0,1138,1373,1,0,0,0,1139,1140,
		5,64,0,0,1140,1141,5,5,0,0,1141,1142,3,10,5,0,1142,1143,5,6,0,0,1143,1373,
		1,0,0,0,1144,1145,5,209,0,0,1145,1146,5,22,0,0,1146,1147,5,25,0,0,1147,
		1373,5,23,0,0,1148,1149,5,92,0,0,1149,1150,5,22,0,0,1150,1151,5,25,0,0,
		1151,1373,5,23,0,0,1152,1153,5,47,0,0,1153,1154,5,22,0,0,1154,1155,5,25,
		0,0,1155,1373,5,23,0,0,1156,1157,5,45,0,0,1157,1158,5,22,0,0,1158,1159,
		5,25,0,0,1159,1373,5,23,0,0,1160,1161,5,46,0,0,1161,1162,5,22,0,0,1162,
		1163,5,25,0,0,1163,1373,5,23,0,0,1164,1165,5,49,0,0,1165,1166,5,22,0,0,
		1166,1167,5,25,0,0,1167,1373,5,23,0,0,1168,1169,5,50,0,0,1169,1170,5,22,
		0,0,1170,1171,5,25,0,0,1171,1373,5,23,0,0,1172,1173,5,48,0,0,1173,1174,
		5,22,0,0,1174,1175,5,25,0,0,1175,1373,5,23,0,0,1176,1177,5,51,0,0,1177,
		1178,5,22,0,0,1178,1179,5,25,0,0,1179,1373,5,23,0,0,1180,1181,5,173,0,
		0,1181,1182,5,22,0,0,1182,1183,5,25,0,0,1183,1373,5,23,0,0,1184,1185,5,
		174,0,0,1185,1186,5,22,0,0,1186,1187,5,25,0,0,1187,1373,5,23,0,0,1188,
		1189,5,175,0,0,1189,1190,5,22,0,0,1190,1191,5,25,0,0,1191,1373,5,23,0,
		0,1192,1193,5,176,0,0,1193,1194,5,22,0,0,1194,1195,5,25,0,0,1195,1373,
		5,23,0,0,1196,1197,5,177,0,0,1197,1198,5,22,0,0,1198,1199,5,25,0,0,1199,
		1373,5,23,0,0,1200,1201,5,178,0,0,1201,1202,5,22,0,0,1202,1203,5,25,0,
		0,1203,1373,5,23,0,0,1204,1205,5,53,0,0,1205,1206,5,22,0,0,1206,1207,5,
		25,0,0,1207,1373,5,23,0,0,1208,1209,5,54,0,0,1209,1210,5,22,0,0,1210,1211,
		5,25,0,0,1211,1373,5,23,0,0,1212,1213,5,56,0,0,1213,1214,5,22,0,0,1214,
		1215,5,25,0,0,1215,1373,5,23,0,0,1216,1217,5,57,0,0,1217,1218,5,22,0,0,
		1218,1219,5,25,0,0,1219,1373,5,23,0,0,1220,1221,5,58,0,0,1221,1222,5,22,
		0,0,1222,1223,5,25,0,0,1223,1373,5,23,0,0,1224,1225,5,59,0,0,1225,1226,
		5,22,0,0,1226,1227,5,25,0,0,1227,1373,5,23,0,0,1228,1229,5,60,0,0,1229,
		1230,5,22,0,0,1230,1231,5,25,0,0,1231,1373,5,23,0,0,1232,1233,5,61,0,0,
		1233,1234,5,22,0,0,1234,1235,5,25,0,0,1235,1373,5,23,0,0,1236,1237,5,63,
		0,0,1237,1238,5,22,0,0,1238,1239,5,25,0,0,1239,1373,5,23,0,0,1240,1241,
		5,55,0,0,1241,1242,5,22,0,0,1242,1243,5,25,0,0,1243,1373,5,23,0,0,1244,
		1245,5,27,0,0,1245,1246,5,5,0,0,1246,1247,3,10,5,0,1247,1248,5,6,0,0,1248,
		1373,1,0,0,0,1249,1250,5,28,0,0,1250,1251,5,5,0,0,1251,1252,3,10,5,0,1252,
		1253,5,6,0,0,1253,1373,1,0,0,0,1254,1255,5,29,0,0,1255,1256,5,5,0,0,1256,
		1257,3,10,5,0,1257,1258,5,6,0,0,1258,1373,1,0,0,0,1259,1260,5,30,0,0,1260,
		1261,5,5,0,0,1261,1262,3,10,5,0,1262,1263,5,6,0,0,1263,1373,1,0,0,0,1264,
		1265,5,31,0,0,1265,1266,5,5,0,0,1266,1267,3,10,5,0,1267,1268,5,6,0,0,1268,
		1373,1,0,0,0,1269,1270,5,32,0,0,1270,1271,5,5,0,0,1271,1272,3,10,5,0,1272,
		1273,5,3,0,0,1273,1274,3,10,5,0,1274,1275,5,3,0,0,1275,1276,3,10,5,0,1276,
		1277,5,3,0,0,1277,1278,3,10,5,0,1278,1279,5,6,0,0,1279,1373,1,0,0,0,1280,
		1281,5,33,0,0,1281,1282,5,5,0,0,1282,1283,3,10,5,0,1283,1284,5,6,0,0,1284,
		1373,1,0,0,0,1285,1286,5,34,0,0,1286,1287,5,5,0,0,1287,1373,5,6,0,0,1288,
		1289,5,35,0,0,1289,1290,5,5,0,0,1290,1291,3,10,5,0,1291,1292,5,6,0,0,1292,
		1373,1,0,0,0,1293,1294,5,36,0,0,1294,1295,5,5,0,0,1295,1296,3,10,5,0,1296,
		1297,5,6,0,0,1297,1373,1,0,0,0,1298,1299,5,37,0,0,1299,1300,5,5,0,0,1300,
		1301,3,10,5,0,1301,1302,5,6,0,0,1302,1373,1,0,0,0,1303,1304,5,38,0,0,1304,
		1305,5,5,0,0,1305,1306,3,10,5,0,1306,1307,5,3,0,0,1307,1308,3,10,5,0,1308,
		1309,5,6,0,0,1309,1373,1,0,0,0,1310,1311,5,39,0,0,1311,1312,5,5,0,0,1312,
		1313,3,10,5,0,1313,1314,5,3,0,0,1314,1315,3,10,5,0,1315,1316,5,6,0,0,1316,
		1373,1,0,0,0,1317,1318,5,41,0,0,1318,1319,5,5,0,0,1319,1320,3,10,5,0,1320,
		1321,5,3,0,0,1321,1322,3,10,5,0,1322,1323,5,6,0,0,1323,1373,1,0,0,0,1324,
		1325,5,42,0,0,1325,1326,5,5,0,0,1326,1327,3,10,5,0,1327,1328,5,6,0,0,1328,
		1373,1,0,0,0,1329,1330,5,43,0,0,1330,1331,5,5,0,0,1331,1332,3,10,5,0,1332,
		1333,5,6,0,0,1333,1373,1,0,0,0,1334,1335,5,44,0,0,1335,1336,5,5,0,0,1336,
		1337,3,10,5,0,1337,1338,5,6,0,0,1338,1373,1,0,0,0,1339,1341,5,24,0,0,1340,
		1339,1,0,0,0,1340,1341,1,0,0,0,1341,1342,1,0,0,0,1342,1373,5,25,0,0,1343,
		1344,5,24,0,0,1344,1373,3,10,5,28,1345,1373,5,92,0,0,1346,1373,5,209,0,
		0,1347,1373,5,45,0,0,1348,1373,5,46,0,0,1349,1373,5,47,0,0,1350,1373,5,
		48,0,0,1351,1373,5,49,0,0,1352,1373,5,50,0,0,1353,1373,5,51,0,0,1354,1373,
		5,52,0,0,1355,1373,5,173,0,0,1356,1373,5,174,0,0,1357,1373,5,175,0,0,1358,
		1373,5,176,0,0,1359,1373,5,177,0,0,1360,1373,5,178,0,0,1361,1373,5,53,
		0,0,1362,1373,5,54,0,0,1363,1373,5,56,0,0,1364,1373,5,57,0,0,1365,1373,
		5,59,0,0,1366,1373,5,60,0,0,1367,1373,5,61,0,0,1368,1373,5,58,0,0,1369,
		1373,5,63,0,0,1370,1373,5,55,0,0,1371,1373,5,65,0,0,1372,300,1,0,0,0,1372,
		305,1,0,0,0,1372,312,1,0,0,0,1372,321,1,0,0,0,1372,328,1,0,0,0,1372,335,
		1,0,0,0,1372,344,1,0,0,0,1372,351,1,0,0,0,1372,358,1,0,0,0,1372,365,1,
		0,0,0,1372,372,1,0,0,0,1372,379,1,0,0,0,1372,386,1,0,0,0,1372,393,1,0,
		0,0,1372,400,1,0,0,0,1372,407,1,0,0,0,1372,414,1,0,0,0,1372,421,1,0,0,
		0,1372,428,1,0,0,0,1372,435,1,0,0,0,1372,440,1,0,0,0,1372,445,1,0,0,0,
		1372,450,1,0,0,0,1372,457,1,0,0,0,1372,462,1,0,0,0,1372,469,1,0,0,0,1372,
		476,1,0,0,0,1372,481,1,0,0,0,1372,488,1,0,0,0,1372,495,1,0,0,0,1372,500,
		1,0,0,0,1372,505,1,0,0,0,1372,516,1,0,0,0,1372,527,1,0,0,0,1372,538,1,
		0,0,0,1372,549,1,0,0,0,1372,556,1,0,0,0,1372,563,1,0,0,0,1372,570,1,0,
		0,0,1372,575,1,0,0,0,1372,588,1,0,0,0,1372,601,1,0,0,0,1372,614,1,0,0,
		0,1372,627,1,0,0,0,1372,640,1,0,0,0,1372,649,1,0,0,0,1372,658,1,0,0,0,
		1372,665,1,0,0,0,1372,672,1,0,0,0,1372,681,1,0,0,0,1372,688,1,0,0,0,1372,
		695,1,0,0,0,1372,704,1,0,0,0,1372,711,1,0,0,0,1372,720,1,0,0,0,1372,727,
		1,0,0,0,1372,736,1,0,0,0,1372,741,1,0,0,0,1372,746,1,0,0,0,1372,755,1,
		0,0,0,1372,762,1,0,0,0,1372,777,1,0,0,0,1372,784,1,0,0,0,1372,799,1,0,
		0,0,1372,804,1,0,0,0,1372,809,1,0,0,0,1372,814,1,0,0,0,1372,819,1,0,0,
		0,1372,824,1,0,0,0,1372,829,1,0,0,0,1372,834,1,0,0,0,1372,839,1,0,0,0,
		1372,844,1,0,0,0,1372,849,1,0,0,0,1372,854,1,0,0,0,1372,861,1,0,0,0,1372,
		866,1,0,0,0,1372,871,1,0,0,0,1372,876,1,0,0,0,1372,885,1,0,0,0,1372,890,
		1,0,0,0,1372,895,1,0,0,0,1372,902,1,0,0,0,1372,909,1,0,0,0,1372,914,1,
		0,0,0,1372,921,1,0,0,0,1372,928,1,0,0,0,1372,941,1,0,0,0,1372,954,1,0,
		0,0,1372,961,1,0,0,0,1372,968,1,0,0,0,1372,975,1,0,0,0,1372,982,1,0,0,
		0,1372,989,1,0,0,0,1372,996,1,0,0,0,1372,1003,1,0,0,0,1372,1010,1,0,0,
		0,1372,1017,1,0,0,0,1372,1026,1,0,0,0,1372,1035,1,0,0,0,1372,1040,1,0,
		0,0,1372,1049,1,0,0,0,1372,1058,1,0,0,0,1372,1067,1,0,0,0,1372,1076,1,
		0,0,0,1372,1085,1,0,0,0,1372,1094,1,0,0,0,1372,1099,1,0,0,0,1372,1106,
		1,0,0,0,1372,1113,1,0,0,0,1372,1120,1,0,0,0,1372,1125,1,0,0,0,1372,1132,
		1,0,0,0,1372,1139,1,0,0,0,1372,1144,1,0,0,0,1372,1148,1,0,0,0,1372,1152,
		1,0,0,0,1372,1156,1,0,0,0,1372,1160,1,0,0,0,1372,1164,1,0,0,0,1372,1168,
		1,0,0,0,1372,1172,1,0,0,0,1372,1176,1,0,0,0,1372,1180,1,0,0,0,1372,1184,
		1,0,0,0,1372,1188,1,0,0,0,1372,1192,1,0,0,0,1372,1196,1,0,0,0,1372,1200,
		1,0,0,0,1372,1204,1,0,0,0,1372,1208,1,0,0,0,1372,1212,1,0,0,0,1372,1216,
		1,0,0,0,1372,1220,1,0,0,0,1372,1224,1,0,0,0,1372,1228,1,0,0,0,1372,1232,
		1,0,0,0,1372,1236,1,0,0,0,1372,1240,1,0,0,0,1372,1244,1,0,0,0,1372,1249,
		1,0,0,0,1372,1254,1,0,0,0,1372,1259,1,0,0,0,1372,1264,1,0,0,0,1372,1269,
		1,0,0,0,1372,1280,1,0,0,0,1372,1285,1,0,0,0,1372,1288,1,0,0,0,1372,1293,
		1,0,0,0,1372,1298,1,0,0,0,1372,1303,1,0,0,0,1372,1310,1,0,0,0,1372,1317,
		1,0,0,0,1372,1324,1,0,0,0,1372,1329,1,0,0,0,1372,1334,1,0,0,0,1372,1340,
		1,0,0,0,1372,1343,1,0,0,0,1372,1345,1,0,0,0,1372,1346,1,0,0,0,1372,1347,
		1,0,0,0,1372,1348,1,0,0,0,1372,1349,1,0,0,0,1372,1350,1,0,0,0,1372,1351,
		1,0,0,0,1372,1352,1,0,0,0,1372,1353,1,0,0,0,1372,1354,1,0,0,0,1372,1355,
		1,0,0,0,1372,1356,1,0,0,0,1372,1357,1,0,0,0,1372,1358,1,0,0,0,1372,1359,
		1,0,0,0,1372,1360,1,0,0,0,1372,1361,1,0,0,0,1372,1362,1,0,0,0,1372,1363,
		1,0,0,0,1372,1364,1,0,0,0,1372,1365,1,0,0,0,1372,1366,1,0,0,0,1372,1367,
		1,0,0,0,1372,1368,1,0,0,0,1372,1369,1,0,0,0,1372,1370,1,0,0,0,1372,1371,
		1,0,0,0,1373,1394,1,0,0,0,1374,1375,10,190,0,0,1375,1376,7,1,0,0,1376,
		1393,3,10,5,191,1377,1378,10,189,0,0,1378,1379,7,2,0,0,1379,1393,3,10,
		5,190,1380,1381,10,188,0,0,1381,1382,7,3,0,0,1382,1393,3,10,5,189,1383,
		1384,10,187,0,0,1384,1385,7,4,0,0,1385,1393,3,10,5,188,1386,1387,10,186,
		0,0,1387,1388,7,5,0,0,1388,1393,3,10,5,187,1389,1390,10,185,0,0,1390,1391,
		7,6,0,0,1391,1393,3,10,5,186,1392,1374,1,0,0,0,1392,1377,1,0,0,0,1392,
		1380,1,0,0,0,1392,1383,1,0,0,0,1392,1386,1,0,0,0,1392,1389,1,0,0,0,1393,
		1396,1,0,0,0,1394,1392,1,0,0,0,1394,1395,1,0,0,0,1395,11,1,0,0,0,1396,
		1394,1,0,0,0,28,15,27,30,41,51,54,63,73,76,85,97,100,111,115,132,144,298,
		582,595,608,621,634,937,950,1340,1372,1392,1394
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
